// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GDShader.flex

package kr.jaehoyi.gdshader.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kr.jaehoyi.gdshader.psi.GDShaderTypes;
import com.intellij.psi.TokenType;


public class GDShaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\5\23\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\10\43\1\44\3\43\1\45\1\43\1\46\2\43"+
    "\1\47\2\43\1\50\1\51\1\52\1\53\1\54\1\0"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\43\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\43\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\43\1\104\1\105\1\106\1\107\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\21\26\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\6\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\0\1\50\1\51\1\0\1\47"+
    "\1\52\1\0\1\53\1\54\1\55\1\56\1\57\7\26"+
    "\1\60\10\26\1\61\1\62\26\26\1\63\4\0\1\64"+
    "\5\0\1\47\1\17\1\65\1\66\15\26\1\67\6\26"+
    "\1\70\5\26\1\71\23\26\5\0\1\64\1\0\2\64"+
    "\4\0\1\72\1\73\2\26\1\74\5\26\1\75\2\26"+
    "\1\76\11\26\1\77\1\100\1\101\1\102\13\26\1\103"+
    "\1\104\4\26\1\105\1\106\1\107\1\110\1\26\1\0"+
    "\1\111\1\112\3\0\2\64\3\0\1\113\1\114\1\115"+
    "\1\116\1\26\1\117\3\26\1\120\1\26\1\121\2\26"+
    "\1\122\1\26\1\123\2\26\1\124\1\125\1\126\15\26"+
    "\1\127\1\130\1\131\1\26\1\132\3\0\1\133\1\134"+
    "\1\135\1\64\2\0\1\136\5\26\1\137\14\26\1\140"+
    "\2\26\1\141\2\26\1\142\1\143\3\26\1\144\5\0"+
    "\1\145\1\0\1\146\1\0\2\26\1\147\1\150\13\26"+
    "\1\151\6\26\1\152\1\26\1\153\5\0\1\154\2\0"+
    "\1\26\1\155\13\26\1\156\14\26\4\0\7\26\1\157"+
    "\12\26\1\160\1\161\7\26\1\0\10\26\1\162\3\26"+
    "\1\163\1\164\10\26\1\165\1\166\7\26\1\167\3\26"+
    "\1\170\2\26\1\171\1\26\1\172\21\26\1\173\1\174"+
    "\1\26\1\175\12\26\1\176\4\26\1\177\1\200\10\26"+
    "\1\201\1\202\5\26\1\203\21\26\1\204\1\205\1\206"+
    "\1\26\1\207\1\26\1\210\20\26\1\211\1\26\1\212"+
    "\1\213\4\26\1\214\5\26\1\215\1\26\1\216\1\26"+
    "\1\217\6\26\1\220\2\26\1\221\15\26\1\222\1\26"+
    "\1\223\16\26\1\224\4\26\1\225\1\26\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[633];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\110\0\110\0\u0240\0\u0288\0\110\0\u02d0\0\u0318\0\u0360"+
    "\0\u03a8\0\u03f0\0\110\0\110\0\u0438\0\u0480\0\u04c8\0\110"+
    "\0\u0510\0\110\0\110\0\110\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\110\0\u0a20\0\110"+
    "\0\110\0\110\0\110\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88"+
    "\0\u0bd0\0\110\0\110\0\110\0\110\0\110\0\110\0\110"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\110\0\u0cf0\0\110\0\110\0\u0d38"+
    "\0\u0d80\0\110\0\110\0\110\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u0510\0\u1008\0\u1050\0\u1098"+
    "\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u0510\0\u1248\0\u1290"+
    "\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0"+
    "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\110\0\u18c0\0\u1908"+
    "\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48"+
    "\0\u1b90\0\u1bd8\0\110\0\110\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u0510\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
    "\0\u0510\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u0510\0\u22e0"+
    "\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\110"+
    "\0\u0510\0\u2be0\0\u2c28\0\u0510\0\u2c70\0\u2cb8\0\u2d00\0\u2d48"+
    "\0\u2d90\0\u0510\0\u2dd8\0\u2e20\0\u0510\0\u2e68\0\u2eb0\0\u2ef8"+
    "\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u0510\0\u0510"+
    "\0\u0510\0\u0510\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258"+
    "\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u0510\0\u0510\0\u3408"+
    "\0\u3450\0\u3498\0\u34e0\0\u0510\0\u0510\0\u0510\0\u0510\0\u3528"+
    "\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768"+
    "\0\u37b0\0\u37f8\0\u3840\0\u0510\0\u0510\0\u0510\0\u0510\0\u3888"+
    "\0\u0510\0\u38d0\0\u3918\0\u3960\0\u0510\0\u39a8\0\u0510\0\u39f0"+
    "\0\u3a38\0\u0510\0\u3a80\0\u0510\0\u3ac8\0\u3b10\0\u0510\0\u0510"+
    "\0\u0510\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u0510\0\u0510"+
    "\0\u0510\0\u3f00\0\u0510\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068"+
    "\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8"+
    "\0\u42f0\0\u4338\0\u0510\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0"+
    "\0\u44e8\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698\0\u0510"+
    "\0\u46e0\0\u4728\0\u0510\0\u4770\0\u47b8\0\u0510\0\u0510\0\u4800"+
    "\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40"+
    "\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u0510\0\u0510"+
    "\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8\0\u4e30"+
    "\0\u4e78\0\u4ec0\0\u4f08\0\u0510\0\u4f50\0\u4f98\0\u4fe0\0\u5028"+
    "\0\u5070\0\u50b8\0\u0510\0\u5100\0\u0510\0\u5148\0\u5190\0\u51d8"+
    "\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388\0\u0510\0\u53d0"+
    "\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580\0\u55c8\0\u5610"+
    "\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808\0\u5850"+
    "\0\u5898\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00\0\u5a48\0\u5a90"+
    "\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0"+
    "\0\u5d18\0\u5d60\0\u0510\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8"+
    "\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u0510\0\u0510\0\u6078"+
    "\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8"+
    "\0\u6300\0\u6348\0\u6390\0\u63d8\0\u6420\0\u6468\0\u64b0\0\u0510"+
    "\0\u64f8\0\u6540\0\u6588\0\u0510\0\u0510\0\u65d0\0\u6618\0\u6660"+
    "\0\u66a8\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u0510\0\u0510\0\u6810"+
    "\0\u6858\0\u68a0\0\u68e8\0\u6930\0\u6978\0\u69c0\0\u6a08\0\u6a50"+
    "\0\u6a98\0\u6ae0\0\u0510\0\u6b28\0\u6b70\0\u6bb8\0\u6c00\0\u0510"+
    "\0\u6c48\0\u6c90\0\u6cd8\0\u6d20\0\u6d68\0\u6db0\0\u6df8\0\u6e40"+
    "\0\u6e88\0\u6ed0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038\0\u7080"+
    "\0\u70c8\0\u0510\0\u0510\0\u7110\0\u7158\0\u71a0\0\u71e8\0\u7230"+
    "\0\u7278\0\u72c0\0\u7308\0\u7350\0\u7398\0\u73e0\0\u7428\0\u0510"+
    "\0\u7470\0\u74b8\0\u7500\0\u7548\0\u7590\0\u0510\0\u75d8\0\u7620"+
    "\0\u7668\0\u76b0\0\u76f8\0\u7740\0\u7788\0\u77d0\0\u0510\0\u0510"+
    "\0\u7818\0\u7860\0\u78a8\0\u78f0\0\u7938\0\u0510\0\u7980\0\u79c8"+
    "\0\u7a10\0\u7a58\0\u7aa0\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0\0\u7c08"+
    "\0\u7c50\0\u7c98\0\u7ce0\0\u7d28\0\u7d70\0\u7db8\0\u7e00\0\u0510"+
    "\0\u0510\0\u7e48\0\u7e90\0\u0510\0\u7ed8\0\u0510\0\u7f20\0\u7f68"+
    "\0\u7fb0\0\u7ff8\0\u8040\0\u8088\0\u80d0\0\u8118\0\u8160\0\u81a8"+
    "\0\u81f0\0\u8238\0\u8280\0\u82c8\0\u8310\0\u8358\0\u0510\0\u83a0"+
    "\0\u0510\0\u0510\0\u83e8\0\u8430\0\u8478\0\u84c0\0\u0510\0\u8508"+
    "\0\u8550\0\u8598\0\u85e0\0\u8628\0\u0510\0\u8670\0\u0510\0\u86b8"+
    "\0\u8700\0\u8748\0\u8790\0\u87d8\0\u8820\0\u8868\0\u88b0\0\u88f8"+
    "\0\u8940\0\u8988\0\u0510\0\u89d0\0\u8a18\0\u8a60\0\u8aa8\0\u8af0"+
    "\0\u8b38\0\u8b80\0\u8bc8\0\u8c10\0\u8c58\0\u8ca0\0\u8ce8\0\u8d30"+
    "\0\u0510\0\u8d78\0\u0510\0\u8dc0\0\u8e08\0\u8e50\0\u8e98\0\u8ee0"+
    "\0\u8f28\0\u8f70\0\u8fb8\0\u9000\0\u9048\0\u9090\0\u90d8\0\u9120"+
    "\0\u9168\0\u0510\0\u91b0\0\u91f8\0\u9240\0\u9288\0\u0510\0\u92d0"+
    "\0\u0510";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[633];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\4\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\13\31\1\32\1\2\1\33\1\34\2\31\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\31"+
    "\1\45\1\46\1\31\1\47\1\31\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\2\31\1\56\1\57\1\60\1\61"+
    "\111\0\2\3\1\0\1\3\135\0\1\62\55\0\2\5"+
    "\1\0\3\5\1\63\42\5\1\64\36\5\60\0\1\65"+
    "\1\66\3\0\1\67\5\0\1\70\3\0\1\71\42\0"+
    "\1\72\66\0\1\73\130\0\1\74\72\0\1\75\14\0"+
    "\1\76\74\0\1\77\12\0\1\100\77\0\5\101\75\0"+
    "\1\102\4\0\1\103\10\0\1\104\75\0\1\101\1\0"+
    "\5\22\12\0\1\105\1\106\3\0\1\107\1\110\11\0"+
    "\1\105\1\106\14\0\1\107\2\0\1\110\25\0\1\101"+
    "\1\0\5\22\12\0\1\105\1\106\3\0\1\107\12\0"+
    "\1\105\1\106\14\0\1\107\41\0\1\111\1\112\107\0"+
    "\1\113\107\0\1\114\1\115\76\0\5\31\6\0\13\31"+
    "\4\0\30\31\26\0\5\31\6\0\13\31\4\0\16\31"+
    "\1\116\1\31\1\117\3\31\1\120\3\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\121\14\31\1\122\11\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\123\3\31"+
    "\1\124\4\31\1\125\11\31\26\0\5\31\6\0\13\31"+
    "\4\0\13\31\1\126\14\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\31\1\127\7\31\1\130\1\31\1\131\2\31"+
    "\1\132\11\31\26\0\5\31\6\0\13\31\4\0\13\31"+
    "\1\133\4\31\1\134\7\31\26\0\5\31\6\0\13\31"+
    "\4\0\11\31\1\135\16\31\26\0\5\31\6\0\13\31"+
    "\4\0\6\31\1\136\6\31\1\137\3\31\1\140\2\31"+
    "\1\141\3\31\26\0\5\31\6\0\13\31\4\0\16\31"+
    "\1\142\11\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\143\3\31\1\144\22\31\26\0\5\31\6\0\13\31"+
    "\4\0\23\31\1\145\4\31\26\0\5\31\6\0\13\31"+
    "\4\0\5\31\1\146\22\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\31\1\147\6\31\1\150\3\31\1\151\1\31"+
    "\1\152\3\31\1\153\2\31\1\154\2\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\155\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\156\3\31\1\157\3\31"+
    "\1\160\2\31\1\161\3\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\31\1\162\3\31\1\163\10\31\1\164\11\31"+
    "\26\0\5\31\6\0\13\31\4\0\10\31\1\165\17\31"+
    "\111\0\1\166\2\0\2\5\3\0\103\5\61\0\1\167"+
    "\115\0\1\170\1\0\1\171\2\0\1\172\75\0\1\173"+
    "\6\0\1\174\112\0\1\175\104\0\1\176\40\0\5\101"+
    "\12\0\1\105\1\106\16\0\1\105\1\106\25\0\14\102"+
    "\1\177\73\102\2\103\1\0\1\103\1\0\103\103\15\0"+
    "\1\200\1\0\1\200\2\0\5\201\103\0\5\202\6\0"+
    "\6\202\12\0\6\202\57\0\1\203\107\0\1\204\77\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\205\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\206\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\207\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\21\31\1\210\6\31\26\0"+
    "\5\31\6\0\13\31\4\0\13\31\1\211\1\31\1\212"+
    "\12\31\26\0\5\31\6\0\13\31\4\0\6\31\1\213"+
    "\21\31\26\0\5\31\6\0\13\31\4\0\21\31\1\214"+
    "\6\31\26\0\5\31\6\0\13\31\4\0\21\31\1\215"+
    "\6\31\26\0\5\31\6\0\13\31\4\0\13\31\1\216"+
    "\14\31\26\0\5\31\6\0\13\31\4\0\13\31\1\217"+
    "\14\31\26\0\5\31\6\0\13\31\4\0\1\31\1\220"+
    "\14\31\1\221\11\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\222\7\31\26\0\5\31\6\0\13\31\4\0"+
    "\16\31\1\223\11\31\26\0\5\31\6\0\13\31\4\0"+
    "\16\31\1\224\11\31\26\0\5\31\6\0\13\31\4\0"+
    "\7\31\1\225\5\31\1\226\12\31\26\0\5\31\6\0"+
    "\13\31\4\0\16\31\1\227\2\31\1\230\1\231\5\31"+
    "\26\0\5\31\6\0\13\31\4\0\1\31\1\232\26\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\233\22\31"+
    "\26\0\5\31\6\0\13\31\4\0\25\31\1\234\2\31"+
    "\26\0\5\31\6\0\13\31\4\0\22\31\1\235\5\31"+
    "\26\0\5\31\6\0\13\31\4\0\4\31\1\236\23\31"+
    "\26\0\5\31\6\0\13\31\4\0\22\31\1\237\5\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\240\1\31"+
    "\1\241\2\31\1\242\5\31\26\0\5\31\6\0\13\31"+
    "\4\0\14\31\1\243\13\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\31\1\244\26\31\26\0\5\31\6\0\13\31"+
    "\4\0\16\31\1\245\11\31\26\0\5\31\6\0\13\31"+
    "\4\0\23\31\1\246\4\31\26\0\5\31\6\0\13\31"+
    "\4\0\5\31\1\247\12\31\1\250\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\251\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\23\31\1\252\4\31\26\0\5\31"+
    "\6\0\13\31\4\0\15\31\1\253\12\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\254\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\255\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\256\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\257\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\3\31\1\260\24\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\261\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\262\16\31\66\0\1\263"+
    "\112\0\1\264\7\0\1\265\72\0\1\266\123\0\1\267"+
    "\13\0\2\270\1\0\1\270\1\0\44\270\1\271\6\270"+
    "\1\272\10\270\1\273\16\270\57\0\1\274\105\0\1\275"+
    "\112\0\1\276\27\0\14\102\1\277\4\102\1\300\66\102"+
    "\22\0\5\201\103\0\5\201\13\0\1\106\17\0\1\106"+
    "\47\0\5\202\6\0\6\202\3\0\1\107\6\0\6\202"+
    "\14\0\1\107\32\0\5\31\6\0\13\31\4\0\13\31"+
    "\1\301\14\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\302\26\31\26\0\5\31\6\0\13\31\4\0\3\31"+
    "\1\303\24\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\304\22\31\26\0\5\31\6\0\13\31\4\0\16\31"+
    "\1\305\11\31\26\0\5\31\6\0\13\31\4\0\21\31"+
    "\1\306\1\307\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\1\31\1\310\26\31\26\0\5\31\6\0\13\31\4\0"+
    "\3\31\1\311\24\31\26\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\312\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\21\31\1\313\6\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\314\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\315\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\1\31\1\316\26\31\26\0\5\31\6\0\13\31\4\0"+
    "\2\31\1\317\25\31\26\0\5\31\6\0\13\31\4\0"+
    "\23\31\1\320\4\31\26\0\5\31\6\0\13\31\4\0"+
    "\10\31\1\321\17\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\322\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\23\31\1\323\4\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\324\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\14\31\1\325\13\31\26\0\5\31\6\0\13\31\4\0"+
    "\3\31\1\326\24\31\26\0\5\31\6\0\13\31\4\0"+
    "\17\31\1\327\10\31\26\0\2\31\1\330\1\331\1\332"+
    "\6\0\13\31\4\0\30\31\26\0\5\31\6\0\13\31"+
    "\4\0\11\31\1\333\16\31\26\0\5\31\6\0\13\31"+
    "\4\0\4\31\1\334\23\31\26\0\5\31\6\0\13\31"+
    "\4\0\5\31\1\335\22\31\26\0\5\31\6\0\13\31"+
    "\4\0\23\31\1\336\4\31\26\0\5\31\6\0\13\31"+
    "\4\0\17\31\1\337\10\31\26\0\5\31\6\0\13\31"+
    "\4\0\4\31\1\340\23\31\26\0\5\31\6\0\13\31"+
    "\4\0\16\31\1\341\11\31\26\0\5\31\6\0\13\31"+
    "\4\0\20\31\1\342\7\31\26\0\5\31\6\0\13\31"+
    "\4\0\15\31\1\343\12\31\26\0\5\31\6\0\13\31"+
    "\4\0\23\31\1\344\4\31\26\0\5\31\6\0\13\31"+
    "\4\0\22\31\1\345\5\31\26\0\5\31\6\0\13\31"+
    "\4\0\5\31\1\346\22\31\26\0\5\31\6\0\13\31"+
    "\4\0\22\31\1\347\5\31\26\0\5\31\6\0\13\31"+
    "\4\0\6\31\1\350\21\31\26\0\5\31\6\0\13\31"+
    "\4\0\14\31\1\351\13\31\26\0\5\31\6\0\13\31"+
    "\4\0\3\31\1\352\24\31\26\0\5\31\6\0\13\31"+
    "\4\0\27\31\1\353\26\0\2\31\1\354\1\355\1\356"+
    "\6\0\13\31\4\0\30\31\26\0\5\31\6\0\13\31"+
    "\4\0\4\31\1\357\23\31\26\0\5\31\6\0\13\31"+
    "\4\0\13\31\1\360\14\31\71\0\1\361\104\0\1\362"+
    "\106\0\1\363\113\0\1\364\114\0\1\365\15\0\2\270"+
    "\1\0\1\270\1\0\44\270\1\271\36\270\51\0\1\366"+
    "\36\0\2\270\1\0\1\270\1\0\44\270\1\271\7\270"+
    "\1\367\30\270\1\0\1\270\1\0\44\270\1\271\6\270"+
    "\1\370\27\270\67\0\1\371\103\0\1\372\105\0\1\373"+
    "\26\0\14\102\1\277\4\102\1\0\66\102\22\0\5\31"+
    "\6\0\13\31\4\0\12\31\1\374\15\31\26\0\2\31"+
    "\1\375\1\376\1\377\6\0\13\31\4\0\30\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u0100\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0101\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\11\31\1\u0102\16\31\26\0"+
    "\5\31\6\0\13\31\4\0\23\31\1\u0103\4\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\31\1\u0104\26\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0105\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0106\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0107\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\31\1\u0108\26\31\26\0"+
    "\5\31\6\0\13\31\4\0\17\31\1\u0109\10\31\26\0"+
    "\5\31\6\0\13\31\4\0\17\31\1\u010a\10\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\u010b\27\31\26\0\5\31"+
    "\6\0\13\31\4\0\22\31\1\u010c\5\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u010d\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\17\31\1\u010e\10\31\26\0\2\31"+
    "\1\u010f\1\u0110\1\u0111\6\0\13\31\4\0\30\31\26\0"+
    "\5\31\6\0\13\31\4\0\23\31\1\u0112\4\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0113\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\31\1\u0114\26\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u0115\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\13\31\1\u0116\14\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0117\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0118\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u0119\24\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u011a\24\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u011b\24\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u011c\24\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u011d\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\17\31\1\u011e\10\31\26\0"+
    "\2\31\1\u011f\1\u0120\1\u0121\6\0\13\31\4\0\30\31"+
    "\26\0\5\31\6\0\13\31\4\0\11\31\1\u0122\16\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\u0123\22\31"+
    "\75\0\1\u0124\16\0\2\362\1\0\1\362\1\0\44\362"+
    "\1\u0125\36\362\2\363\1\0\1\363\1\0\44\363\1\u0126"+
    "\36\363\62\0\1\u0127\121\0\1\u0128\14\0\1\366\1\270"+
    "\1\0\1\270\103\0\2\270\1\0\1\270\1\0\44\270"+
    "\1\271\10\270\1\u0129\27\270\1\0\1\270\1\0\44\270"+
    "\1\271\7\270\1\u012a\26\270\77\0\1\u012b\100\0\1\u012c"+
    "\101\0\1\u012d\47\0\5\31\6\0\13\31\4\0\1\u012e"+
    "\27\31\26\0\5\31\6\0\13\31\4\0\15\31\1\u012f"+
    "\12\31\26\0\5\31\6\0\13\31\4\0\13\31\1\u0130"+
    "\14\31\26\0\5\31\6\0\13\31\4\0\20\31\1\u0131"+
    "\7\31\26\0\5\31\6\0\13\31\4\0\20\31\1\u0132"+
    "\7\31\26\0\5\31\6\0\13\31\4\0\13\31\1\u0133"+
    "\14\31\26\0\5\31\6\0\13\31\4\0\1\u0134\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\1\31\1\u0135\2\31"+
    "\1\u0136\1\u0137\7\31\1\u0138\2\31\1\u0139\1\u013a\6\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\u013b\12\31"+
    "\26\0\5\31\6\0\13\31\4\0\13\31\1\u013c\14\31"+
    "\26\0\5\31\6\0\13\31\4\0\14\31\1\u013d\13\31"+
    "\26\0\5\31\6\0\13\31\4\0\20\31\1\u013e\7\31"+
    "\26\0\5\31\6\0\13\31\4\0\22\31\1\u013f\5\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\u0140\12\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\u0141\22\31"+
    "\26\0\5\31\6\0\13\31\4\0\20\31\1\u0142\7\31"+
    "\26\0\5\31\6\0\13\31\4\0\10\31\1\u0143\17\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\u0144\22\31"+
    "\26\0\5\31\6\0\13\31\4\0\11\31\1\u0145\16\31"+
    "\26\0\5\31\6\0\13\31\4\0\22\31\1\u0146\5\31"+
    "\26\0\5\31\6\0\13\31\4\0\10\31\1\u0147\17\31"+
    "\26\0\5\31\6\0\13\31\4\0\20\31\1\u0148\7\31"+
    "\26\0\5\31\6\0\13\31\4\0\13\31\1\u0149\14\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\u014a\12\31"+
    "\65\0\1\u014b\77\0\1\u014c\107\0\1\u014d\36\0\2\u0127"+
    "\1\0\1\u0127\1\0\44\u0127\1\u014e\36\u0127\2\u0128\1\0"+
    "\1\u0128\1\0\44\u0128\1\u014f\36\u0128\2\u0129\1\0\1\u0129"+
    "\1\0\44\u0129\1\u0150\36\u0129\2\270\1\0\1\270\1\0"+
    "\44\270\1\271\10\270\1\u0151\25\270\60\0\1\u0152\104\0"+
    "\1\u0153\32\0\2\u012d\1\0\1\u012d\1\0\44\u012d\1\u0154"+
    "\36\u012d\22\0\5\31\6\0\13\31\4\0\3\31\1\u0155"+
    "\24\31\26\0\5\31\6\0\13\31\4\0\23\31\1\u0156"+
    "\4\31\26\0\5\31\6\0\13\31\4\0\22\31\1\u0157"+
    "\5\31\26\0\5\31\6\0\13\31\4\0\4\31\1\u0158"+
    "\23\31\26\0\5\31\6\0\13\31\4\0\1\u0159\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\23\31\1\u015a\4\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\u015b\12\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\u015c\22\31"+
    "\26\0\5\31\6\0\13\31\4\0\15\31\1\u015d\12\31"+
    "\26\0\5\31\6\0\13\31\4\0\16\31\1\u015e\11\31"+
    "\26\0\5\31\6\0\13\31\4\0\1\31\1\u015f\14\31"+
    "\1\u0160\11\31\26\0\5\31\6\0\13\31\4\0\3\31"+
    "\1\u0161\24\31\26\0\5\31\6\0\13\31\4\0\3\31"+
    "\1\u0162\24\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u0163\22\31\26\0\5\31\6\0\13\31\4\0\17\31"+
    "\1\u0164\10\31\26\0\5\31\6\0\13\31\4\0\1\u0165"+
    "\27\31\26\0\5\31\6\0\13\31\4\0\1\u0166\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\20\31\1\u0167\7\31"+
    "\26\0\5\31\6\0\13\31\4\0\1\u0168\27\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\u0169\27\31\26\0\5\31"+
    "\6\0\13\31\4\0\13\31\1\u016a\14\31\26\0\5\31"+
    "\6\0\13\31\4\0\14\31\1\u016b\13\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u016c\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\7\31\1\u016d\20\31\4\0\2\u014b"+
    "\1\0\1\u014b\1\0\44\u014b\1\u016e\36\u014b\1\0\1\u014c"+
    "\1\362\1\0\1\362\104\0\1\u014d\1\363\1\0\1\363"+
    "\154\0\1\u016f\107\0\1\u0170\107\0\1\u0171\36\0\2\u0151"+
    "\1\0\1\u0151\1\0\44\u0151\1\u0172\36\u0151\61\0\1\u0173"+
    "\26\0\2\u0153\1\0\1\u0153\1\0\44\u0153\1\u0174\36\u0153"+
    "\51\0\1\u0175\60\0\5\31\6\0\13\31\4\0\16\31"+
    "\1\u0176\11\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u0177\22\31\26\0\5\31\6\0\13\31\4\0\13\31"+
    "\1\u0178\1\31\1\u0179\12\31\26\0\5\31\6\0\13\31"+
    "\4\0\15\31\1\u017a\12\31\26\0\5\31\6\0\13\31"+
    "\4\0\11\31\1\u017b\16\31\26\0\5\31\6\0\13\31"+
    "\4\0\6\31\1\u017c\10\31\1\u017d\10\31\26\0\5\31"+
    "\6\0\13\31\4\0\23\31\1\u017e\4\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\u017f\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\15\31\1\u0180\12\31\26\0\5\31"+
    "\6\0\13\31\4\0\23\31\1\u0181\4\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\u0182\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u0183\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\u0184\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\14\31\1\u0185\13\31\26\0\5\31"+
    "\6\0\13\31\4\0\4\31\1\u0186\1\u0187\22\31\26\0"+
    "\2\31\1\u0188\1\u0189\1\31\6\0\2\31\1\u018a\1\31"+
    "\1\u018b\6\31\4\0\30\31\26\0\5\31\6\0\13\31"+
    "\4\0\22\31\1\u018c\5\31\26\0\5\31\6\0\13\31"+
    "\4\0\3\31\1\u018d\24\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\u018e\27\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u018f\7\31\55\0\1\u0190\37\0\1\u016f\1\u0127"+
    "\1\0\1\u0127\104\0\1\u0170\1\u0128\1\0\1\u0128\104\0"+
    "\1\u0171\1\u0129\1\0\1\u0129\154\0\1\u0191\36\0\2\u0173"+
    "\1\0\1\u0173\1\0\44\u0173\1\u0192\36\u0173\51\0\1\u0193"+
    "\37\0\1\u0175\1\u012d\1\0\1\u012d\125\0\5\31\6\0"+
    "\13\31\4\0\15\31\1\u0194\12\31\26\0\5\31\6\0"+
    "\13\31\4\0\11\31\1\u0195\16\31\26\0\5\31\6\0"+
    "\13\31\4\0\5\31\1\u0196\22\31\26\0\5\31\6\0"+
    "\13\31\4\0\11\31\1\u0197\16\31\26\0\5\31\6\0"+
    "\13\31\4\0\21\31\1\u0198\6\31\26\0\5\31\6\0"+
    "\13\31\4\0\1\31\1\u0199\26\31\26\0\5\31\6\0"+
    "\13\31\4\0\22\31\1\u019a\5\31\26\0\5\31\6\0"+
    "\13\31\4\0\14\31\1\u019b\13\31\26\0\5\31\6\0"+
    "\13\31\4\0\14\31\1\u019c\13\31\26\0\5\31\6\0"+
    "\13\31\4\0\7\31\1\u019d\20\31\26\0\5\31\6\0"+
    "\13\31\4\0\7\31\1\u019e\20\31\26\0\5\31\6\0"+
    "\13\31\4\0\5\31\1\u019f\22\31\26\0\5\31\6\0"+
    "\13\31\4\0\1\u01a0\27\31\26\0\2\31\1\u01a1\1\u01a2"+
    "\1\31\6\0\13\31\4\0\30\31\26\0\5\31\6\0"+
    "\13\31\4\0\16\31\1\u01a3\11\31\26\0\5\31\6\0"+
    "\13\31\4\0\11\31\1\u01a4\16\31\26\0\5\31\6\0"+
    "\13\31\4\0\15\31\1\u01a5\12\31\26\0\5\31\6\0"+
    "\3\31\1\u01a6\7\31\4\0\30\31\26\0\5\31\6\0"+
    "\3\31\1\u01a7\7\31\4\0\30\31\26\0\5\31\6\0"+
    "\13\31\4\0\23\31\1\u01a8\4\31\26\0\5\31\6\0"+
    "\13\31\4\0\26\31\1\u01a9\1\31\26\0\5\31\6\0"+
    "\13\31\4\0\27\31\1\u01aa\26\0\5\31\6\0\13\31"+
    "\4\0\16\31\1\u01ab\11\31\26\0\5\31\6\0\13\31"+
    "\4\0\14\31\1\u01ac\13\31\26\0\2\31\1\u01ad\1\u01ae"+
    "\1\31\6\0\13\31\4\0\30\31\5\0\1\u0190\1\u014b"+
    "\1\0\1\u014b\104\0\1\u0191\1\u0151\1\0\1\u0151\154\0"+
    "\1\u01af\37\0\1\u0193\1\u0153\1\0\1\u0153\125\0\5\31"+
    "\6\0\13\31\4\0\24\31\1\u01b0\3\31\26\0\5\31"+
    "\6\0\13\31\4\0\15\31\1\u01b1\12\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u01b2\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\6\31\1\u01b3\21\31\26\0\5\31"+
    "\6\0\13\31\4\0\16\31\1\u01b4\11\31\26\0\5\31"+
    "\6\0\13\31\4\0\23\31\1\u01b5\4\31\26\0\5\31"+
    "\6\0\13\31\4\0\10\31\1\u01b6\17\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u01b7\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u01b8\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\10\31\1\u01b9\17\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u01ba\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\u01bb\16\31\26\0\5\31"+
    "\6\0\3\31\1\u01bc\7\31\4\0\30\31\26\0\5\31"+
    "\6\0\3\31\1\u01bd\7\31\4\0\30\31\26\0\5\31"+
    "\6\0\13\31\4\0\4\31\1\u01be\23\31\26\0\5\31"+
    "\6\0\13\31\4\0\21\31\1\u01bf\6\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u01c0\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\2\31\1\u01c1\25\31\26\0\5\31"+
    "\6\0\13\31\4\0\22\31\1\u01c2\5\31\26\0\5\31"+
    "\6\0\13\31\4\0\17\31\1\u01c3\10\31\26\0\5\31"+
    "\6\0\13\31\4\0\13\31\1\u01c4\14\31\26\0\5\31"+
    "\6\0\13\31\4\0\16\31\1\u01c5\11\31\26\0\5\31"+
    "\6\0\3\31\1\u01c6\7\31\4\0\30\31\26\0\5\31"+
    "\6\0\3\31\1\u01c7\7\31\4\0\30\31\5\0\1\u01af"+
    "\1\u0173\1\0\1\u0173\125\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\u01c8\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\u01c9\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u01ca\7\31\26\0\5\31\6\0\13\31\4\0"+
    "\16\31\1\u01cb\11\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\u01cc\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\13\31\1\u01cd\14\31\26\0\5\31\6\0\13\31\4\0"+
    "\1\u01ce\27\31\26\0\5\31\6\0\13\31\4\0\13\31"+
    "\1\u01cf\14\31\26\0\5\31\6\0\13\31\4\0\15\31"+
    "\1\u01d0\12\31\26\0\5\31\6\0\13\31\4\0\15\31"+
    "\1\u01d1\12\31\26\0\5\31\6\0\13\31\4\0\15\31"+
    "\1\u01d2\12\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u01d3\22\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u01d4\26\31\26\0\5\31\6\0\13\31\4\0\2\31"+
    "\1\u01d5\25\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u01d6\22\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u01d7\22\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u01d8\22\31\26\0\5\31\6\0\13\31\4\0\16\31"+
    "\1\u01d9\11\31\26\0\5\31\6\0\13\31\4\0\4\31"+
    "\1\u01da\23\31\26\0\5\31\6\0\13\31\4\0\20\31"+
    "\1\u01db\7\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u01dc\26\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u01dd\22\31\26\0\5\31\6\0\13\31\4\0\20\31"+
    "\1\u01de\7\31\26\0\5\31\6\0\13\31\4\0\20\31"+
    "\1\u01df\7\31\26\0\5\31\6\0\13\31\4\0\22\31"+
    "\1\u01e0\5\31\26\0\5\31\6\0\13\31\4\0\22\31"+
    "\1\u01e1\5\31\26\0\5\31\6\0\13\31\4\0\1\u01e2"+
    "\27\31\26\0\5\31\6\0\13\31\4\0\5\31\1\u01e3"+
    "\22\31\26\0\5\31\6\0\13\31\4\0\1\u01e4\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\4\31\1\u01e5\23\31"+
    "\26\0\5\31\6\0\13\31\4\0\2\31\1\u01e6\25\31"+
    "\26\0\5\31\6\0\13\31\4\0\13\31\1\u01e7\14\31"+
    "\26\0\5\31\6\0\1\u01e8\12\31\4\0\30\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u01e9\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u01ea\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u01eb\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\21\31\1\u01ec\6\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u01ed\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\21\31\1\u01ee\6\31\26\0"+
    "\5\31\6\0\13\31\4\0\14\31\1\u01ef\13\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u01f0\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\u01f1\27\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u01f2\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\u01f3\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\21\31\1\u01f4\6\31\26\0\5\31"+
    "\6\0\13\31\4\0\22\31\1\u01f5\5\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u01f6\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\13\31\1\u01f7\14\31\26\0\5\31"+
    "\6\0\13\31\4\0\5\31\1\u01f8\22\31\26\0\5\31"+
    "\6\0\13\31\4\0\20\31\1\u01f9\7\31\26\0\5\31"+
    "\6\0\13\31\4\0\15\31\1\u01fa\12\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\u01fb\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\u01fc\27\31\26\0\5\31\6\0"+
    "\13\31\4\0\22\31\1\u01fd\5\31\26\0\5\31\6\0"+
    "\13\31\4\0\21\31\1\u01fe\6\31\26\0\5\31\6\0"+
    "\13\31\4\0\17\31\1\u01ff\10\31\26\0\5\31\6\0"+
    "\13\31\4\0\2\31\1\u0200\17\31\1\u0201\2\31\1\u0202"+
    "\2\31\26\0\5\31\6\0\13\31\4\0\26\31\1\u0203"+
    "\1\31\26\0\5\31\6\0\13\31\4\0\16\31\1\u0204"+
    "\11\31\26\0\5\31\6\0\13\31\4\0\21\31\1\u0205"+
    "\6\31\26\0\5\31\6\0\13\31\4\0\5\31\1\u0206"+
    "\22\31\26\0\5\31\6\0\13\31\4\0\26\31\1\u0207"+
    "\1\31\26\0\5\31\6\0\13\31\4\0\5\31\1\u0208"+
    "\22\31\26\0\5\31\6\0\13\31\4\0\20\31\1\u0209"+
    "\7\31\26\0\5\31\6\0\13\31\4\0\1\31\1\u020a"+
    "\26\31\26\0\5\31\6\0\13\31\4\0\16\31\1\u020b"+
    "\11\31\26\0\5\31\6\0\13\31\4\0\14\31\1\u020c"+
    "\13\31\26\0\5\31\6\0\13\31\4\0\1\u020d\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\27\31\1\u020e\26\0"+
    "\5\31\6\0\13\31\4\0\13\31\1\u020f\14\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u0210\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\10\31\1\u0211\17\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0212\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\23\31\1\u0213\4\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\u0214\27\31\26\0\5\31"+
    "\6\0\13\31\4\0\26\31\1\u0215\1\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u0216\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\13\31\1\u0217\14\31\26\0\5\31"+
    "\6\0\13\31\4\0\15\31\1\u0218\12\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\u0219\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\14\31\1\u021a\13\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u021b\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u021c\26\31\26\0\5\31"+
    "\6\0\13\31\4\0\11\31\1\u021d\16\31\26\0\5\31"+
    "\6\0\13\31\4\0\23\31\1\u021e\4\31\26\0\5\31"+
    "\6\0\13\31\4\0\7\31\1\u021f\20\31\26\0\5\31"+
    "\6\0\13\31\4\0\1\31\1\u0220\1\u0221\4\31\1\u0222"+
    "\5\31\1\u0223\2\31\1\u0224\7\31\26\0\5\31\6\0"+
    "\13\31\4\0\22\31\1\u0225\5\31\26\0\5\31\6\0"+
    "\13\31\4\0\27\31\1\u0226\26\0\5\31\6\0\7\31"+
    "\1\u0227\3\31\4\0\30\31\26\0\5\31\6\0\13\31"+
    "\4\0\1\u0228\27\31\26\0\5\31\6\0\13\31\4\0"+
    "\17\31\1\u0229\10\31\26\0\5\31\6\0\13\31\4\0"+
    "\11\31\1\u022a\16\31\26\0\5\31\6\0\13\31\4\0"+
    "\3\31\1\u022b\24\31\26\0\5\31\6\0\13\31\4\0"+
    "\15\31\1\u022c\12\31\26\0\5\31\6\0\13\31\4\0"+
    "\22\31\1\u022d\5\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u022e\7\31\26\0\5\31\6\0\13\31\4\0"+
    "\10\31\1\u022f\17\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u0230\7\31\26\0\5\31\6\0\13\31\4\0"+
    "\16\31\1\u0231\11\31\26\0\5\31\6\0\13\31\4\0"+
    "\23\31\1\u0232\4\31\26\0\5\31\6\0\4\31\1\u0233"+
    "\6\31\4\0\30\31\26\0\5\31\6\0\13\31\4\0"+
    "\4\31\1\u0234\23\31\26\0\5\31\6\0\13\31\4\0"+
    "\14\31\1\u0235\13\31\26\0\5\31\6\0\13\31\4\0"+
    "\17\31\1\u0236\10\31\26\0\5\31\6\0\13\31\4\0"+
    "\12\31\1\u0237\15\31\26\0\5\31\6\0\13\31\4\0"+
    "\21\31\1\u0238\6\31\26\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\u0239\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\u023a\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\15\31\1\u023b\12\31\26\0\5\31\6\0\13\31\4\0"+
    "\1\31\1\u023c\26\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u023d\7\31\26\0\5\31\6\0\13\31\4\0"+
    "\20\31\1\u023e\7\31\26\0\5\31\6\0\10\31\1\u023f"+
    "\2\31\4\0\30\31\26\0\5\31\6\0\13\31\4\0"+
    "\11\31\1\u0240\16\31\26\0\5\31\6\0\13\31\4\0"+
    "\1\31\1\u0241\26\31\26\0\5\31\6\0\13\31\4\0"+
    "\14\31\1\u0242\13\31\26\0\5\31\6\0\13\31\4\0"+
    "\17\31\1\u0243\10\31\26\0\5\31\6\0\13\31\4\0"+
    "\5\31\1\u0244\22\31\26\0\5\31\6\0\13\31\4\0"+
    "\27\31\1\u0245\26\0\5\31\6\0\13\31\4\0\14\31"+
    "\1\u0246\13\31\26\0\5\31\6\0\13\31\4\0\5\31"+
    "\1\u0247\22\31\26\0\5\31\6\0\13\31\4\0\21\31"+
    "\1\u0248\6\31\26\0\5\31\6\0\13\31\4\0\17\31"+
    "\1\u0249\10\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u024a\26\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u024b\26\31\26\0\5\31\6\0\13\31\4\0\21\31"+
    "\1\u024c\6\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u024d\26\31\26\0\5\31\6\0\13\31\4\0\1\31"+
    "\1\u024e\26\31\26\0\5\31\6\0\13\31\4\0\1\u024f"+
    "\27\31\26\0\5\31\6\0\13\31\4\0\17\31\1\u0250"+
    "\10\31\26\0\5\31\6\0\13\31\4\0\20\31\1\u0251"+
    "\7\31\26\0\5\31\6\0\13\31\4\0\21\31\1\u0252"+
    "\6\31\26\0\5\31\6\0\13\31\4\0\13\31\1\u0253"+
    "\14\31\26\0\5\31\6\0\13\31\4\0\2\31\1\u0254"+
    "\25\31\26\0\5\31\6\0\13\31\4\0\1\31\1\u0255"+
    "\26\31\26\0\5\31\6\0\13\31\4\0\1\u0256\27\31"+
    "\26\0\5\31\6\0\13\31\4\0\5\31\1\u0257\22\31"+
    "\26\0\5\31\6\0\13\31\4\0\1\u0258\27\31\26\0"+
    "\5\31\6\0\13\31\4\0\13\31\1\u0259\14\31\26\0"+
    "\5\31\6\0\13\31\4\0\15\31\1\u025a\12\31\26\0"+
    "\5\31\6\0\13\31\4\0\1\31\1\u025b\26\31\26\0"+
    "\5\31\6\0\13\31\4\0\15\31\1\u025c\12\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u025d\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u025e\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\11\31\1\u025f\16\31\26\0"+
    "\5\31\6\0\13\31\4\0\15\31\1\u0260\12\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0261\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0262\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\4\31\1\u0263\23\31\26\0"+
    "\5\31\6\0\13\31\4\0\21\31\1\u0264\6\31\26\0"+
    "\5\31\6\0\13\31\4\0\11\31\1\u0265\16\31\26\0"+
    "\5\31\6\0\13\31\4\0\26\31\1\u0266\1\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u0267\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\21\31\1\u0268\6\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u0269\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u026a\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u026b\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\23\31\1\u026c\4\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u026d\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\22\31\1\u026e\5\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u026f\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u0270\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\20\31\1\u0271\7\31\26\0"+
    "\5\31\6\0\13\31\4\0\5\31\1\u0272\22\31\26\0"+
    "\5\31\6\0\13\31\4\0\17\31\1\u0273\10\31\26\0"+
    "\5\31\6\0\13\31\4\0\16\31\1\u0274\11\31\26\0"+
    "\5\31\6\0\13\31\4\0\11\31\1\u0275\16\31\26\0"+
    "\5\31\6\0\13\31\4\0\17\31\1\u0276\10\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u0277\24\31\26\0"+
    "\5\31\6\0\13\31\4\0\11\31\1\u0278\16\31\26\0"+
    "\5\31\6\0\13\31\4\0\3\31\1\u0279\24\31\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[37656];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\3\11\21\1\1\11\1\1\4\11"+
    "\6\0\7\11\1\1\1\0\1\1\1\11\1\0\2\11"+
    "\1\0\1\1\3\11\51\1\1\11\4\0\1\1\5\0"+
    "\2\1\2\11\56\1\5\0\1\1\1\0\2\1\4\0"+
    "\1\11\60\1\1\0\2\1\3\0\2\1\3\0\50\1"+
    "\3\0\4\1\2\0\37\1\5\0\1\1\1\0\1\1"+
    "\1\0\31\1\5\0\1\1\2\0\32\1\4\0\33\1"+
    "\1\0\312\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[633];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GDShaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 151: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 3:
            { return GDShaderTypes.OP_NOT;
            }
          // fall through
          case 153: break;
          case 4:
            { return GDShaderTypes.UNTERMINATED_STRING_CONSTANT;
            }
          // fall through
          case 154: break;
          case 5:
            { return GDShaderTypes.OP_MOD;
            }
          // fall through
          case 155: break;
          case 6:
            { return GDShaderTypes.OP_BIT_AND;
            }
          // fall through
          case 156: break;
          case 7:
            { return GDShaderTypes.PARENTHESIS_OPEN;
            }
          // fall through
          case 157: break;
          case 8:
            { return GDShaderTypes.PARENTHESIS_CLOSE;
            }
          // fall through
          case 158: break;
          case 9:
            { return GDShaderTypes.OP_MUL;
            }
          // fall through
          case 159: break;
          case 10:
            { return GDShaderTypes.OP_ADD;
            }
          // fall through
          case 160: break;
          case 11:
            { return GDShaderTypes.COMMA;
            }
          // fall through
          case 161: break;
          case 12:
            { return GDShaderTypes.OP_SUB;
            }
          // fall through
          case 162: break;
          case 13:
            { return GDShaderTypes.PERIOD;
            }
          // fall through
          case 163: break;
          case 14:
            { return GDShaderTypes.OP_DIV;
            }
          // fall through
          case 164: break;
          case 15:
            { return GDShaderTypes.INT_CONSTANT;
            }
          // fall through
          case 165: break;
          case 16:
            { return GDShaderTypes.COLON;
            }
          // fall through
          case 166: break;
          case 17:
            { return GDShaderTypes.SEMICOLON;
            }
          // fall through
          case 167: break;
          case 18:
            { return GDShaderTypes.OP_LESS;
            }
          // fall through
          case 168: break;
          case 19:
            { return GDShaderTypes.OP_ASSIGN;
            }
          // fall through
          case 169: break;
          case 20:
            { return GDShaderTypes.OP_GREATER;
            }
          // fall through
          case 170: break;
          case 21:
            { return GDShaderTypes.QUESTION;
            }
          // fall through
          case 171: break;
          case 22:
            { return GDShaderTypes.IDENTIFIER;
            }
          // fall through
          case 172: break;
          case 23:
            { return GDShaderTypes.BRACKET_OPEN;
            }
          // fall through
          case 173: break;
          case 24:
            { return GDShaderTypes.BRACKET_CLOSE;
            }
          // fall through
          case 174: break;
          case 25:
            { return GDShaderTypes.OP_BIT_XOR;
            }
          // fall through
          case 175: break;
          case 26:
            { return GDShaderTypes.CURLY_BRACKET_OPEN;
            }
          // fall through
          case 176: break;
          case 27:
            { return GDShaderTypes.OP_BIT_OR;
            }
          // fall through
          case 177: break;
          case 28:
            { return GDShaderTypes.CURLY_BRACKET_CLOSE;
            }
          // fall through
          case 178: break;
          case 29:
            { return GDShaderTypes.OP_BIT_INVERT;
            }
          // fall through
          case 179: break;
          case 30:
            { return GDShaderTypes.OP_NOT_EQUAL;
            }
          // fall through
          case 180: break;
          case 31:
            { return GDShaderTypes.STRING_CONSTANT;
            }
          // fall through
          case 181: break;
          case 32:
            { return GDShaderTypes.OP_ASSIGN_MOD;
            }
          // fall through
          case 182: break;
          case 33:
            { return GDShaderTypes.OP_AND;
            }
          // fall through
          case 183: break;
          case 34:
            { return GDShaderTypes.OP_ASSIGN_MUL;
            }
          // fall through
          case 184: break;
          case 35:
            { return GDShaderTypes.OP_INCREMENT;
            }
          // fall through
          case 185: break;
          case 36:
            { return GDShaderTypes.OP_ASSIGN_ADD;
            }
          // fall through
          case 186: break;
          case 37:
            { return GDShaderTypes.OP_DECREMENT;
            }
          // fall through
          case 187: break;
          case 38:
            { return GDShaderTypes.OP_ASSIGN_SUB;
            }
          // fall through
          case 188: break;
          case 39:
            { return GDShaderTypes.FLOAT_CONSTANT;
            }
          // fall through
          case 189: break;
          case 40:
            { return GDShaderTypes.LINE_COMMENT;
            }
          // fall through
          case 190: break;
          case 41:
            { return GDShaderTypes.OP_ASSIGN_DIV;
            }
          // fall through
          case 191: break;
          case 42:
            { return GDShaderTypes.UINT_CONSTANT;
            }
          // fall through
          case 192: break;
          case 43:
            { return GDShaderTypes.OP_SHIFT_LEFT;
            }
          // fall through
          case 193: break;
          case 44:
            { return GDShaderTypes.OP_LESS_EQUAL;
            }
          // fall through
          case 194: break;
          case 45:
            { return GDShaderTypes.OP_EQUAL;
            }
          // fall through
          case 195: break;
          case 46:
            { return GDShaderTypes.OP_GREATER_EQUAL;
            }
          // fall through
          case 196: break;
          case 47:
            { return GDShaderTypes.OP_SHIFT_RIGHT;
            }
          // fall through
          case 197: break;
          case 48:
            { return GDShaderTypes.CF_DO;
            }
          // fall through
          case 198: break;
          case 49:
            { return GDShaderTypes.CF_IF;
            }
          // fall through
          case 199: break;
          case 50:
            { return GDShaderTypes.ARG_IN;
            }
          // fall through
          case 200: break;
          case 51:
            { return GDShaderTypes.OP_OR;
            }
          // fall through
          case 201: break;
          case 52:
            { return GDShaderTypes.PP_IF_LINE;
            }
          // fall through
          case 202: break;
          case 53:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_LEFT;
            }
          // fall through
          case 203: break;
          case 54:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_RIGHT;
            }
          // fall through
          case 204: break;
          case 55:
            { return GDShaderTypes.CF_FOR;
            }
          // fall through
          case 205: break;
          case 56:
            { return GDShaderTypes.TYPE_INT;
            }
          // fall through
          case 206: break;
          case 57:
            { return GDShaderTypes.ARG_OUT;
            }
          // fall through
          case 207: break;
          case 58:
            { return GDShaderTypes.BLOCK_COMMENT;
            }
          // fall through
          case 208: break;
          case 59:
            { return GDShaderTypes.TYPE_BOOL;
            }
          // fall through
          case 209: break;
          case 60:
            { return GDShaderTypes.CF_CASE;
            }
          // fall through
          case 210: break;
          case 61:
            { return GDShaderTypes.CF_ELSE;
            }
          // fall through
          case 211: break;
          case 62:
            { return GDShaderTypes.INTERPOLATION_FLAT;
            }
          // fall through
          case 212: break;
          case 63:
            { return GDShaderTypes.PRECISION_LOW;
            }
          // fall through
          case 213: break;
          case 64:
            { return GDShaderTypes.TYPE_MAT2;
            }
          // fall through
          case 214: break;
          case 65:
            { return GDShaderTypes.TYPE_MAT3;
            }
          // fall through
          case 215: break;
          case 66:
            { return GDShaderTypes.TYPE_MAT4;
            }
          // fall through
          case 216: break;
          case 67:
            { return GDShaderTypes.TRUE;
            }
          // fall through
          case 217: break;
          case 68:
            { return GDShaderTypes.TYPE_UINT;
            }
          // fall through
          case 218: break;
          case 69:
            { return GDShaderTypes.TYPE_VEC2;
            }
          // fall through
          case 219: break;
          case 70:
            { return GDShaderTypes.TYPE_VEC3;
            }
          // fall through
          case 220: break;
          case 71:
            { return GDShaderTypes.TYPE_VEC4;
            }
          // fall through
          case 221: break;
          case 72:
            { return GDShaderTypes.TYPE_VOID;
            }
          // fall through
          case 222: break;
          case 73:
            { return GDShaderTypes.PP_ELIF_LINE;
            }
          // fall through
          case 223: break;
          case 74:
            { return GDShaderTypes.PP_ELSE_LINE;
            }
          // fall through
          case 224: break;
          case 75:
            { return GDShaderTypes.CF_BREAK;
            }
          // fall through
          case 225: break;
          case 76:
            { return GDShaderTypes.TYPE_BVEC2;
            }
          // fall through
          case 226: break;
          case 77:
            { return GDShaderTypes.TYPE_BVEC3;
            }
          // fall through
          case 227: break;
          case 78:
            { return GDShaderTypes.TYPE_BVEC4;
            }
          // fall through
          case 228: break;
          case 79:
            { return GDShaderTypes.CONST;
            }
          // fall through
          case 229: break;
          case 80:
            { return GDShaderTypes.FALSE;
            }
          // fall through
          case 230: break;
          case 81:
            { return GDShaderTypes.TYPE_FLOAT;
            }
          // fall through
          case 231: break;
          case 82:
            { return GDShaderTypes.PRECISION_HIGH;
            }
          // fall through
          case 232: break;
          case 83:
            { return GDShaderTypes.ARG_INOUT;
            }
          // fall through
          case 233: break;
          case 84:
            { return GDShaderTypes.TYPE_IVEC2;
            }
          // fall through
          case 234: break;
          case 85:
            { return GDShaderTypes.TYPE_IVEC3;
            }
          // fall through
          case 235: break;
          case 86:
            { return GDShaderTypes.TYPE_IVEC4;
            }
          // fall through
          case 236: break;
          case 87:
            { return GDShaderTypes.TYPE_UVEC2;
            }
          // fall through
          case 237: break;
          case 88:
            { return GDShaderTypes.TYPE_UVEC3;
            }
          // fall through
          case 238: break;
          case 89:
            { return GDShaderTypes.TYPE_UVEC4;
            }
          // fall through
          case 239: break;
          case 90:
            { return GDShaderTypes.CF_WHILE;
            }
          // fall through
          case 240: break;
          case 91:
            { return GDShaderTypes.PP_ENDIF_LINE;
            }
          // fall through
          case 241: break;
          case 92:
            { return GDShaderTypes.PP_ERROR_LINE;
            }
          // fall through
          case 242: break;
          case 93:
            { return GDShaderTypes.PP_IFDEF_LINE;
            }
          // fall through
          case 243: break;
          case 94:
            { return GDShaderTypes.PP_UNDEF_LINE;
            }
          // fall through
          case 244: break;
          case 95:
            { return GDShaderTypes.GLOBAL;
            }
          // fall through
          case 245: break;
          case 96:
            { return GDShaderTypes.CF_RETURN;
            }
          // fall through
          case 246: break;
          case 97:
            { return GDShaderTypes.INTERPOLATION_SMOOTH;
            }
          // fall through
          case 247: break;
          case 98:
            { return GDShaderTypes.STRUCT;
            }
          // fall through
          case 248: break;
          case 99:
            { return GDShaderTypes.CF_SWITCH;
            }
          // fall through
          case 249: break;
          case 100:
            { return GDShaderTypes.PP_DEFINE_LINE;
            }
          // fall through
          case 250: break;
          case 101:
            { return GDShaderTypes.PP_IFNDEF_LINE;
            }
          // fall through
          case 251: break;
          case 102:
            { return GDShaderTypes.PP_PRAGMA_LINE;
            }
          // fall through
          case 252: break;
          case 103:
            { return GDShaderTypes.CF_DEFAULT;
            }
          // fall through
          case 253: break;
          case 104:
            { return GDShaderTypes.CF_DISCARD;
            }
          // fall through
          case 254: break;
          case 105:
            { return GDShaderTypes.PRECISION_MEDIUM;
            }
          // fall through
          case 255: break;
          case 106:
            { return GDShaderTypes.UNIFORM;
            }
          // fall through
          case 256: break;
          case 107:
            { return GDShaderTypes.VARYING;
            }
          // fall through
          case 257: break;
          case 108:
            { return GDShaderTypes.PP_INCLUDE_LINE;
            }
          // fall through
          case 258: break;
          case 109:
            { return GDShaderTypes.CF_CONTINUE;
            }
          // fall through
          case 259: break;
          case 110:
            { return GDShaderTypes.INSTANCE;
            }
          // fall through
          case 260: break;
          case 111:
            { return GDShaderTypes.HINT_ENUM;
            }
          // fall through
          case 261: break;
          case 112:
            { return GDShaderTypes.TYPE_SAMPLER2D;
            }
          // fall through
          case 262: break;
          case 113:
            { return GDShaderTypes.TYPE_SAMPLER3D;
            }
          // fall through
          case 263: break;
          case 114:
            { return GDShaderTypes.HINT_RANGE;
            }
          // fall through
          case 264: break;
          case 115:
            { return GDShaderTypes.TYPE_ISAMPLER2D;
            }
          // fall through
          case 265: break;
          case 116:
            { return GDShaderTypes.TYPE_ISAMPLER3D;
            }
          // fall through
          case 266: break;
          case 117:
            { return GDShaderTypes.TYPE_USAMPLER2D;
            }
          // fall through
          case 267: break;
          case 118:
            { return GDShaderTypes.TYPE_USAMPLER3D;
            }
          // fall through
          case 268: break;
          case 119:
            { return GDShaderTypes.HINT_NORMAL_TEXTURE;
            }
          // fall through
          case 269: break;
          case 120:
            { return GDShaderTypes.RENDER_MODE;
            }
          // fall through
          case 270: break;
          case 121:
            { return GDShaderTypes.TYPE_SAMPLERCUBE;
            }
          // fall through
          case 271: break;
          case 122:
            { return GDShaderTypes.SHADER_TYPE;
            }
          // fall through
          case 272: break;
          case 123:
            { return GDShaderTypes.HINT_SOURCE_COLOR;
            }
          // fall through
          case 273: break;
          case 124:
            { return GDShaderTypes.STENCIL_MODE;
            }
          // fall through
          case 274: break;
          case 125:
            { return GDShaderTypes.FILTER_LINEAR;
            }
          // fall through
          case 275: break;
          case 126:
            { return GDShaderTypes.REPEAT_ENABLE;
            }
          // fall through
          case 276: break;
          case 127:
            { return GDShaderTypes.FILTER_NEAREST;
            }
          // fall through
          case 277: break;
          case 128:
            { return GDShaderTypes.UNIFORM_GROUP;
            }
          // fall through
          case 278: break;
          case 129:
            { return GDShaderTypes.HINT_INSTANCE_INDEX;
            }
          // fall through
          case 279: break;
          case 130:
            { return GDShaderTypes.REPEAT_DISABLE;
            }
          // fall through
          case 280: break;
          case 131:
            { return GDShaderTypes.HINT_ANISOTROPY_TEXTURE;
            }
          // fall through
          case 281: break;
          case 132:
            { return GDShaderTypes.HINT_ROUGHNESS_A;
            }
          // fall through
          case 282: break;
          case 133:
            { return GDShaderTypes.HINT_ROUGHNESS_B;
            }
          // fall through
          case 283: break;
          case 134:
            { return GDShaderTypes.HINT_ROUGHNESS_G;
            }
          // fall through
          case 284: break;
          case 135:
            { return GDShaderTypes.HINT_ROUGHNESS_R;
            }
          // fall through
          case 285: break;
          case 136:
            { return GDShaderTypes.TYPE_SAMPLERCUBEARRAY;
            }
          // fall through
          case 286: break;
          case 137:
            { return GDShaderTypes.HINT_DEFAULT_BLACK_TEXTURE;
            }
          // fall through
          case 287: break;
          case 138:
            { return GDShaderTypes.HINT_DEFAULT_WHITE_TEXTURE;
            }
          // fall through
          case 288: break;
          case 139:
            { return GDShaderTypes.HINT_DEPTH_TEXTURE;
            }
          // fall through
          case 289: break;
          case 140:
            { return GDShaderTypes.TYPE_SAMPLEREXT;
            }
          // fall through
          case 290: break;
          case 141:
            { return GDShaderTypes.HINT_ROUGHNESS_GRAY;
            }
          // fall through
          case 291: break;
          case 142:
            { return GDShaderTypes.HINT_SCREEN_TEXTURE;
            }
          // fall through
          case 292: break;
          case 143:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP;
            }
          // fall through
          case 293: break;
          case 144:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP;
            }
          // fall through
          case 294: break;
          case 145:
            { return GDShaderTypes.HINT_ROUGHNESS_NORMAL_TEXTURE;
            }
          // fall through
          case 295: break;
          case 146:
            { return GDShaderTypes.HINT_DEFAULT_TRANSPARENT_TEXTURE;
            }
          // fall through
          case 296: break;
          case 147:
            { return GDShaderTypes.HINT_COLOR_CONVERSION_DISABLED;
            }
          // fall through
          case 297: break;
          case 148:
            { return GDShaderTypes.HINT_NORMAL_ROUGHNESS_TEXTURE;
            }
          // fall through
          case 298: break;
          case 149:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 299: break;
          case 150:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
