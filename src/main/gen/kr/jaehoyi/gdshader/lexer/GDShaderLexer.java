// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GDShader.flex

package kr.jaehoyi.gdshader.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kr.jaehoyi.gdshader.psi.GDShaderTypes;
import com.intellij.psi.TokenType;


public class GDShaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\5\22\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\10\35\1\42\3\35\1\43\1\35\1\44\5\35\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\35\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\35\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\35\1\101"+
    "\1\102\1\103\1\104\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\21\24\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\0\1\46\1\47\2\0\1\45\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\7\24\1\56\10\24\1\57"+
    "\1\60\26\24\1\61\2\0\1\45\1\62\1\63\15\24"+
    "\1\64\6\24\1\65\5\24\1\66\23\24\1\0\1\67"+
    "\1\70\2\24\1\71\5\24\1\72\2\24\1\73\11\24"+
    "\1\74\1\75\1\76\1\77\13\24\1\100\1\101\4\24"+
    "\1\102\1\103\1\104\1\105\1\24\1\106\1\107\1\110"+
    "\1\111\1\24\1\112\3\24\1\113\1\24\1\114\2\24"+
    "\1\115\1\24\1\116\2\24\1\117\1\120\1\121\15\24"+
    "\1\122\1\123\1\124\1\24\1\125\5\24\1\126\14\24"+
    "\1\127\2\24\1\130\2\24\1\131\1\132\5\24\1\133"+
    "\1\134\13\24\1\135\6\24\1\136\1\24\1\137\1\24"+
    "\1\140\13\24\1\141\23\24\1\142\12\24\1\143\1\144"+
    "\17\24\1\145\3\24\1\146\1\147\10\24\1\150\1\151"+
    "\7\24\1\152\3\24\1\153\2\24\1\154\1\24\1\155"+
    "\21\24\1\156\1\157\1\24\1\160\12\24\1\161\4\24"+
    "\1\162\1\163\10\24\1\164\1\165\5\24\1\166\21\24"+
    "\1\167\1\170\1\171\1\24\1\172\1\24\1\173\20\24"+
    "\1\174\1\24\1\175\1\176\4\24\1\177\5\24\1\200"+
    "\1\24\1\201\1\24\1\202\6\24\1\203\2\24\1\204"+
    "\12\24\1\205\2\24\1\206\17\24\1\207\4\24\1\210"+
    "\1\24\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u019e"+
    "\0\u01e3\0\u0228\0\u019e\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u019e\0\u019e\0\u03c6\0\u040b\0\u0450\0\u019e\0\u0495\0\u019e"+
    "\0\u019e\0\u019e\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u019e\0\u096f\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u09b4\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u09f9\0\u0a3e\0\u0a83\0\u019e\0\u033c\0\u0ac8\0\u019e"+
    "\0\u019e\0\u0b0d\0\u019e\0\u019e\0\u019e\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0495\0\u0d7a\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0495\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u019e\0\u15d5"+
    "\0\u161a\0\u165f\0\u019e\0\u019e\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b"+
    "\0\u19e0\0\u0495\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u0495\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u0495\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c"+
    "\0\u21b1\0\u21f6\0\u223b\0\u019e\0\u0495\0\u2280\0\u22c5\0\u0495"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u0495\0\u2463\0\u24a8"+
    "\0\u0495\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u0495\0\u0495\0\u0495\0\u0495\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u0495\0\u0495\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u0495"+
    "\0\u0495\0\u0495\0\u0495\0\u2b65\0\u0495\0\u0495\0\u0495\0\u0495"+
    "\0\u2baa\0\u0495\0\u2bef\0\u2c34\0\u2c79\0\u0495\0\u2cbe\0\u0495"+
    "\0\u2d03\0\u2d48\0\u0495\0\u2d8d\0\u0495\0\u2dd2\0\u2e17\0\u0495"+
    "\0\u0495\0\u0495\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u0495"+
    "\0\u0495\0\u0495\0\u31dd\0\u0495\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u0495\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u0495\0\u36b7"+
    "\0\u36fc\0\u0495\0\u3741\0\u3786\0\u0495\0\u0495\0\u37cb\0\u3810"+
    "\0\u3855\0\u389a\0\u38df\0\u0495\0\u0495\0\u3924\0\u3969\0\u39ae"+
    "\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u0495\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u0495"+
    "\0\u3db9\0\u0495\0\u3dfe\0\u0495\0\u3e43\0\u3e88\0\u3ecd\0\u3f12"+
    "\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a"+
    "\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362"+
    "\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a"+
    "\0\u45cf\0\u4614\0\u4659\0\u0495\0\u469e\0\u46e3\0\u4728\0\u476d"+
    "\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u0495\0\u0495"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33"+
    "\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u0495"+
    "\0\u4d5b\0\u4da0\0\u4de5\0\u0495\0\u0495\0\u4e2a\0\u4e6f\0\u4eb4"+
    "\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u0495\0\u0495\0\u5052"+
    "\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a"+
    "\0\u52bf\0\u5304\0\u0495\0\u5349\0\u538e\0\u53d3\0\u5418\0\u0495"+
    "\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640"+
    "\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868"+
    "\0\u58ad\0\u0495\0\u0495\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06"+
    "\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u0495"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u0495\0\u5d87\0\u5dcc"+
    "\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u0495\0\u0495"+
    "\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u0495\0\u6108\0\u614d"+
    "\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375"+
    "\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u0495"+
    "\0\u0495\0\u659d\0\u65e2\0\u0495\0\u6627\0\u0495\0\u666c\0\u66b1"+
    "\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9"+
    "\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77\0\u0495\0\u6abc"+
    "\0\u0495\0\u0495\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u0495\0\u6c15"+
    "\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29\0\u0495\0\u6d6e\0\u0495\0\u6db3"+
    "\0\u6df8\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51\0\u6f96\0\u6fdb"+
    "\0\u7020\0\u7065\0\u0495\0\u70aa\0\u70ef\0\u7134\0\u7179\0\u71be"+
    "\0\u7203\0\u7248\0\u728d\0\u72d2\0\u7317\0\u0495\0\u735c\0\u73a1"+
    "\0\u0495\0\u73e6\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584"+
    "\0\u75c9\0\u760e\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767\0\u77ac"+
    "\0\u0495\0\u77f1\0\u7836\0\u787b\0\u78c0\0\u0495\0\u7905\0\u0495";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\4\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\11\27\1\30\1\0\1\31\1\32\2\27\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\27\1\43"+
    "\1\44\1\27\1\45\1\27\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\2\27\1\54\1\55\1\56\1\57\1\0"+
    "\2\2\1\0\1\2\131\0\1\60\53\0\2\4\1\0"+
    "\3\4\1\61\37\4\1\62\36\4\31\0\1\63\63\0"+
    "\1\64\232\0\1\65\67\0\1\66\14\0\1\67\71\0"+
    "\1\70\12\0\1\71\74\0\5\72\72\0\1\73\4\0"+
    "\1\74\10\0\1\75\72\0\1\72\1\0\5\76\12\0"+
    "\1\77\1\100\14\0\1\77\1\100\44\0\1\72\1\0"+
    "\5\20\12\0\1\77\1\100\2\0\1\101\11\0\1\77"+
    "\1\100\14\0\1\101\40\0\1\102\1\103\104\0\1\104"+
    "\104\0\1\105\1\106\73\0\5\27\6\0\11\27\4\0"+
    "\30\27\25\0\5\27\6\0\11\27\4\0\16\27\1\107"+
    "\1\27\1\110\3\27\1\111\3\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\112\14\27\1\113\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\114\3\27\1\115"+
    "\4\27\1\116\11\27\25\0\5\27\6\0\11\27\4\0"+
    "\13\27\1\117\14\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\120\7\27\1\121\1\27\1\122\2\27\1\123"+
    "\11\27\25\0\5\27\6\0\11\27\4\0\13\27\1\124"+
    "\4\27\1\125\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\126\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\6\27\1\127\6\27\1\130\3\27\1\131\2\27\1\132"+
    "\3\27\25\0\5\27\6\0\11\27\4\0\16\27\1\133"+
    "\11\27\25\0\5\27\6\0\11\27\4\0\1\27\1\134"+
    "\3\27\1\135\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\23\27\1\136\4\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\137\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\140\6\27\1\141\3\27\1\142\1\27\1\143"+
    "\3\27\1\144\2\27\1\145\2\27\25\0\5\27\6\0"+
    "\11\27\4\0\20\27\1\146\7\27\25\0\5\27\6\0"+
    "\11\27\4\0\11\27\1\147\3\27\1\150\3\27\1\151"+
    "\2\27\1\152\3\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\153\3\27\1\154\10\27\1\155\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\10\27\1\156\17\27\106\0"+
    "\1\157\2\0\2\4\3\0\100\4\21\0\5\72\12\0"+
    "\1\77\1\100\14\0\1\77\1\100\25\0\13\73\1\160"+
    "\71\73\2\74\1\0\1\74\1\0\100\74\14\0\1\161"+
    "\1\0\1\161\2\0\5\162\110\0\1\163\104\0\1\164"+
    "\74\0\5\27\6\0\11\27\4\0\16\27\1\165\11\27"+
    "\25\0\5\27\6\0\11\27\4\0\5\27\1\166\22\27"+
    "\25\0\5\27\6\0\11\27\4\0\5\27\1\167\22\27"+
    "\25\0\5\27\6\0\11\27\4\0\21\27\1\170\6\27"+
    "\25\0\5\27\6\0\11\27\4\0\13\27\1\171\1\27"+
    "\1\172\12\27\25\0\5\27\6\0\11\27\4\0\6\27"+
    "\1\173\21\27\25\0\5\27\6\0\11\27\4\0\21\27"+
    "\1\174\6\27\25\0\5\27\6\0\11\27\4\0\21\27"+
    "\1\175\6\27\25\0\5\27\6\0\11\27\4\0\13\27"+
    "\1\176\14\27\25\0\5\27\6\0\11\27\4\0\13\27"+
    "\1\177\14\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\200\14\27\1\201\11\27\25\0\5\27\6\0\11\27"+
    "\4\0\20\27\1\202\7\27\25\0\5\27\6\0\11\27"+
    "\4\0\16\27\1\203\11\27\25\0\5\27\6\0\11\27"+
    "\4\0\16\27\1\204\11\27\25\0\5\27\6\0\11\27"+
    "\4\0\7\27\1\205\5\27\1\206\12\27\25\0\5\27"+
    "\6\0\11\27\4\0\16\27\1\207\2\27\1\210\1\211"+
    "\5\27\25\0\5\27\6\0\11\27\4\0\1\27\1\212"+
    "\26\27\25\0\5\27\6\0\11\27\4\0\5\27\1\213"+
    "\22\27\25\0\5\27\6\0\11\27\4\0\25\27\1\214"+
    "\2\27\25\0\5\27\6\0\11\27\4\0\22\27\1\215"+
    "\5\27\25\0\5\27\6\0\11\27\4\0\4\27\1\216"+
    "\23\27\25\0\5\27\6\0\11\27\4\0\22\27\1\217"+
    "\5\27\25\0\5\27\6\0\11\27\4\0\15\27\1\220"+
    "\1\27\1\221\2\27\1\222\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\14\27\1\223\13\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\224\26\27\25\0\5\27\6\0"+
    "\11\27\4\0\16\27\1\225\11\27\25\0\5\27\6\0"+
    "\11\27\4\0\23\27\1\226\4\27\25\0\5\27\6\0"+
    "\11\27\4\0\5\27\1\227\12\27\1\230\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\231\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\23\27\1\232\4\27\25\0"+
    "\5\27\6\0\11\27\4\0\15\27\1\233\12\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\234\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\1\27\1\235\26\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\236\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\237\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\3\27\1\240\24\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\241\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\242\16\27\4\0"+
    "\13\73\1\243\4\73\1\244\64\73\21\0\5\162\100\0"+
    "\5\162\13\0\1\100\15\0\1\100\46\0\5\27\6\0"+
    "\11\27\4\0\13\27\1\245\14\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\246\26\27\25\0\5\27\6\0"+
    "\11\27\4\0\3\27\1\247\24\27\25\0\5\27\6\0"+
    "\11\27\4\0\5\27\1\250\22\27\25\0\5\27\6\0"+
    "\11\27\4\0\16\27\1\251\11\27\25\0\5\27\6\0"+
    "\11\27\4\0\21\27\1\252\1\253\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\254\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\255\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\256\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\21\27\1\257\6\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\260\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\261\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\262\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\2\27\1\263\25\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\264\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\10\27\1\265\17\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\266\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\267\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\270\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\14\27\1\271\13\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\272\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\17\27\1\273\10\27\25\0\2\27"+
    "\1\274\1\275\1\276\6\0\11\27\4\0\30\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\277\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\4\27\1\300\23\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\301\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\23\27\1\302\4\27\25\0"+
    "\5\27\6\0\11\27\4\0\17\27\1\303\10\27\25\0"+
    "\5\27\6\0\11\27\4\0\4\27\1\304\23\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\305\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\306\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\15\27\1\307\12\27\25\0"+
    "\5\27\6\0\11\27\4\0\23\27\1\310\4\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\311\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\312\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\313\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\6\27\1\314\21\27\25\0"+
    "\5\27\6\0\11\27\4\0\14\27\1\315\13\27\25\0"+
    "\5\27\6\0\11\27\4\0\3\27\1\316\24\27\25\0"+
    "\5\27\6\0\11\27\4\0\27\27\1\317\25\0\2\27"+
    "\1\320\1\321\1\322\6\0\11\27\4\0\30\27\25\0"+
    "\5\27\6\0\11\27\4\0\4\27\1\323\23\27\25\0"+
    "\5\27\6\0\11\27\4\0\13\27\1\324\14\27\4\0"+
    "\13\73\1\243\4\73\1\0\64\73\21\0\5\27\6\0"+
    "\11\27\4\0\12\27\1\325\15\27\25\0\2\27\1\326"+
    "\1\327\1\330\6\0\11\27\4\0\30\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\331\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\332\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\11\27\1\333\16\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\334\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\335\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\336\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\337\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\340\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\341\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\17\27\1\342\10\27\25\0\5\27"+
    "\6\0\11\27\4\0\17\27\1\343\10\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\344\27\27\25\0\5\27\6\0"+
    "\11\27\4\0\22\27\1\345\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\346\26\27\25\0\5\27\6\0"+
    "\11\27\4\0\17\27\1\347\10\27\25\0\2\27\1\350"+
    "\1\351\1\352\6\0\11\27\4\0\30\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\353\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\354\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\355\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\356\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\13\27\1\357\14\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\360\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\361\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\362\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\363\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\364\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\365\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\16\27\1\366\11\27\25\0\5\27"+
    "\6\0\11\27\4\0\17\27\1\367\10\27\25\0\2\27"+
    "\1\370\1\371\1\372\6\0\11\27\4\0\30\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\373\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\374\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\1\375\27\27\25\0\5\27"+
    "\6\0\11\27\4\0\15\27\1\376\12\27\25\0\5\27"+
    "\6\0\11\27\4\0\13\27\1\377\14\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u0100\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u0101\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\13\27\1\u0102\14\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\u0103\27\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\u0104\2\27\1\u0105\1\u0106\7\27"+
    "\1\u0107\2\27\1\u0108\1\u0109\6\27\25\0\5\27\6\0"+
    "\11\27\4\0\15\27\1\u010a\12\27\25\0\5\27\6\0"+
    "\11\27\4\0\13\27\1\u010b\14\27\25\0\5\27\6\0"+
    "\11\27\4\0\14\27\1\u010c\13\27\25\0\5\27\6\0"+
    "\11\27\4\0\20\27\1\u010d\7\27\25\0\5\27\6\0"+
    "\11\27\4\0\22\27\1\u010e\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\15\27\1\u010f\12\27\25\0\5\27\6\0"+
    "\11\27\4\0\5\27\1\u0110\22\27\25\0\5\27\6\0"+
    "\11\27\4\0\20\27\1\u0111\7\27\25\0\5\27\6\0"+
    "\11\27\4\0\10\27\1\u0112\17\27\25\0\5\27\6\0"+
    "\11\27\4\0\5\27\1\u0113\22\27\25\0\5\27\6\0"+
    "\11\27\4\0\11\27\1\u0114\16\27\25\0\5\27\6\0"+
    "\11\27\4\0\22\27\1\u0115\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\10\27\1\u0116\17\27\25\0\5\27\6\0"+
    "\11\27\4\0\20\27\1\u0117\7\27\25\0\5\27\6\0"+
    "\11\27\4\0\13\27\1\u0118\14\27\25\0\5\27\6\0"+
    "\11\27\4\0\15\27\1\u0119\12\27\25\0\5\27\6\0"+
    "\11\27\4\0\3\27\1\u011a\24\27\25\0\5\27\6\0"+
    "\11\27\4\0\23\27\1\u011b\4\27\25\0\5\27\6\0"+
    "\11\27\4\0\22\27\1\u011c\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\4\27\1\u011d\23\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\u011e\27\27\25\0\5\27\6\0\11\27"+
    "\4\0\23\27\1\u011f\4\27\25\0\5\27\6\0\11\27"+
    "\4\0\15\27\1\u0120\12\27\25\0\5\27\6\0\11\27"+
    "\4\0\5\27\1\u0121\22\27\25\0\5\27\6\0\11\27"+
    "\4\0\15\27\1\u0122\12\27\25\0\5\27\6\0\11\27"+
    "\4\0\16\27\1\u0123\11\27\25\0\5\27\6\0\11\27"+
    "\4\0\1\27\1\u0124\14\27\1\u0125\11\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\u0126\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\3\27\1\u0127\24\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\u0128\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\17\27\1\u0129\10\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\u012a\27\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\u012b\27\27\25\0\5\27\6\0\11\27"+
    "\4\0\20\27\1\u012c\7\27\25\0\5\27\6\0\11\27"+
    "\4\0\1\u012d\27\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\u012e\27\27\25\0\5\27\6\0\11\27\4\0\13\27"+
    "\1\u012f\14\27\25\0\5\27\6\0\11\27\4\0\14\27"+
    "\1\u0130\13\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u0131\22\27\25\0\5\27\6\0\11\27\4\0\7\27"+
    "\1\u0132\20\27\25\0\5\27\6\0\11\27\4\0\16\27"+
    "\1\u0133\11\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u0134\22\27\25\0\5\27\6\0\11\27\4\0\13\27"+
    "\1\u0135\1\27\1\u0136\12\27\25\0\5\27\6\0\11\27"+
    "\4\0\15\27\1\u0137\12\27\25\0\5\27\6\0\11\27"+
    "\4\0\11\27\1\u0138\16\27\25\0\5\27\6\0\11\27"+
    "\4\0\6\27\1\u0139\10\27\1\u013a\10\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\u013b\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u013c\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\15\27\1\u013d\12\27\25\0\5\27"+
    "\6\0\11\27\4\0\23\27\1\u013e\4\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u013f\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\u0140\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u0141\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\14\27\1\u0142\13\27\25\0\5\27"+
    "\6\0\11\27\4\0\4\27\1\u0143\1\u0144\22\27\25\0"+
    "\2\27\1\u0145\1\u0146\1\27\6\0\2\27\1\u0147\1\27"+
    "\1\u0148\4\27\4\0\30\27\25\0\5\27\6\0\11\27"+
    "\4\0\22\27\1\u0149\5\27\25\0\5\27\6\0\11\27"+
    "\4\0\3\27\1\u014a\24\27\25\0\5\27\6\0\11\27"+
    "\4\0\1\u014b\27\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u014c\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\24\27\1\u014d\3\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u014e\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u014f\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u0150\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\21\27\1\u0151\6\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u0152\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\22\27\1\u0153\5\27\25\0\5\27\6\0\11\27\4\0"+
    "\14\27\1\u0154\13\27\25\0\5\27\6\0\11\27\4\0"+
    "\14\27\1\u0155\13\27\25\0\5\27\6\0\11\27\4\0"+
    "\7\27\1\u0156\20\27\25\0\5\27\6\0\11\27\4\0"+
    "\7\27\1\u0157\20\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u0158\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\u0159\27\27\25\0\2\27\1\u015a\1\u015b\1\27\6\0"+
    "\11\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\16\27\1\u015c\11\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u015d\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\15\27\1\u015e\12\27\25\0\5\27\6\0\3\27\1\u015f"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\3\27\1\u0160"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\23\27\1\u0161\4\27\25\0\5\27\6\0\11\27\4\0"+
    "\26\27\1\u0162\1\27\25\0\5\27\6\0\11\27\4\0"+
    "\27\27\1\u0163\25\0\5\27\6\0\11\27\4\0\16\27"+
    "\1\u0164\11\27\25\0\5\27\6\0\11\27\4\0\14\27"+
    "\1\u0165\13\27\25\0\2\27\1\u0166\1\u0167\1\27\6\0"+
    "\11\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u0168\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\15\27\1\u0169\12\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u016a\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\6\27\1\u016b\21\27\25\0\5\27\6\0\11\27\4\0"+
    "\16\27\1\u016c\11\27\25\0\5\27\6\0\11\27\4\0"+
    "\23\27\1\u016d\4\27\25\0\5\27\6\0\11\27\4\0"+
    "\10\27\1\u016e\17\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u016f\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u0170\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\10\27\1\u0171\17\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u0172\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u0173\16\27\25\0\5\27\6\0\3\27\1\u0174"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\3\27\1\u0175"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\4\27\1\u0176\23\27\25\0\5\27\6\0\11\27\4\0"+
    "\21\27\1\u0177\6\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u0178\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\2\27\1\u0179\25\27\25\0\5\27\6\0\11\27\4\0"+
    "\22\27\1\u017a\5\27\25\0\5\27\6\0\11\27\4\0"+
    "\17\27\1\u017b\10\27\25\0\5\27\6\0\11\27\4\0"+
    "\13\27\1\u017c\14\27\25\0\5\27\6\0\11\27\4\0"+
    "\16\27\1\u017d\11\27\25\0\5\27\6\0\3\27\1\u017e"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\3\27\1\u017f"+
    "\5\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u0180\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u0181\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u0182\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\16\27\1\u0183\11\27\25\0\5\27\6\0\11\27\4\0"+
    "\22\27\1\u0184\5\27\25\0\5\27\6\0\11\27\4\0"+
    "\13\27\1\u0185\14\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\u0186\27\27\25\0\5\27\6\0\11\27\4\0\13\27"+
    "\1\u0187\14\27\25\0\5\27\6\0\11\27\4\0\15\27"+
    "\1\u0188\12\27\25\0\5\27\6\0\11\27\4\0\15\27"+
    "\1\u0189\12\27\25\0\5\27\6\0\11\27\4\0\15\27"+
    "\1\u018a\12\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u018b\22\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u018c\26\27\25\0\5\27\6\0\11\27\4\0\2\27"+
    "\1\u018d\25\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u018e\22\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u018f\22\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u0190\22\27\25\0\5\27\6\0\11\27\4\0\16\27"+
    "\1\u0191\11\27\25\0\5\27\6\0\11\27\4\0\4\27"+
    "\1\u0192\23\27\25\0\5\27\6\0\11\27\4\0\21\27"+
    "\1\u0193\6\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u0194\26\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u0195\22\27\25\0\5\27\6\0\11\27\4\0\20\27"+
    "\1\u0196\7\27\25\0\5\27\6\0\11\27\4\0\20\27"+
    "\1\u0197\7\27\25\0\5\27\6\0\11\27\4\0\22\27"+
    "\1\u0198\5\27\25\0\5\27\6\0\11\27\4\0\22\27"+
    "\1\u0199\5\27\25\0\5\27\6\0\11\27\4\0\1\u019a"+
    "\27\27\25\0\5\27\6\0\11\27\4\0\5\27\1\u019b"+
    "\22\27\25\0\5\27\6\0\11\27\4\0\1\u019c\27\27"+
    "\25\0\5\27\6\0\11\27\4\0\4\27\1\u019d\23\27"+
    "\25\0\5\27\6\0\11\27\4\0\2\27\1\u019e\25\27"+
    "\25\0\5\27\6\0\11\27\4\0\13\27\1\u019f\14\27"+
    "\25\0\5\27\6\0\1\u01a0\10\27\4\0\30\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u01a1\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u01a2\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\u01a3\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\u01a4\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u01a5\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\21\27\1\u01a6\6\27\25\0"+
    "\5\27\6\0\11\27\4\0\14\27\1\u01a7\13\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\u01a8\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\1\u01a9\27\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\u01aa\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u01ab\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\21\27\1\u01ac\6\27\25\0\5\27"+
    "\6\0\11\27\4\0\22\27\1\u01ad\5\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\u01ae\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\13\27\1\u01af\14\27\25\0\5\27"+
    "\6\0\11\27\4\0\5\27\1\u01b0\22\27\25\0\5\27"+
    "\6\0\11\27\4\0\20\27\1\u01b1\7\27\25\0\5\27"+
    "\6\0\11\27\4\0\15\27\1\u01b2\12\27\25\0\5\27"+
    "\6\0\11\27\4\0\16\27\1\u01b3\11\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\u01b4\27\27\25\0\5\27\6\0"+
    "\11\27\4\0\22\27\1\u01b5\5\27\25\0\5\27\6\0"+
    "\11\27\4\0\21\27\1\u01b6\6\27\25\0\5\27\6\0"+
    "\11\27\4\0\17\27\1\u01b7\10\27\25\0\5\27\6\0"+
    "\11\27\4\0\2\27\1\u01b8\17\27\1\u01b9\2\27\1\u01ba"+
    "\2\27\25\0\5\27\6\0\11\27\4\0\26\27\1\u01bb"+
    "\1\27\25\0\5\27\6\0\11\27\4\0\16\27\1\u01bc"+
    "\11\27\25\0\5\27\6\0\11\27\4\0\21\27\1\u01bd"+
    "\6\27\25\0\5\27\6\0\11\27\4\0\5\27\1\u01be"+
    "\22\27\25\0\5\27\6\0\11\27\4\0\26\27\1\u01bf"+
    "\1\27\25\0\5\27\6\0\11\27\4\0\5\27\1\u01c0"+
    "\22\27\25\0\5\27\6\0\11\27\4\0\20\27\1\u01c1"+
    "\7\27\25\0\5\27\6\0\11\27\4\0\1\27\1\u01c2"+
    "\26\27\25\0\5\27\6\0\11\27\4\0\15\27\1\u01c3"+
    "\12\27\25\0\5\27\6\0\11\27\4\0\14\27\1\u01c4"+
    "\13\27\25\0\5\27\6\0\11\27\4\0\1\u01c5\27\27"+
    "\25\0\5\27\6\0\11\27\4\0\27\27\1\u01c6\25\0"+
    "\5\27\6\0\11\27\4\0\13\27\1\u01c7\14\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u01c8\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\10\27\1\u01c9\17\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u01ca\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\23\27\1\u01cb\4\27\25\0"+
    "\5\27\6\0\11\27\4\0\1\u01cc\27\27\25\0\5\27"+
    "\6\0\11\27\4\0\26\27\1\u01cd\1\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\27\1\u01ce\26\27\25\0\5\27"+
    "\6\0\11\27\4\0\13\27\1\u01cf\14\27\25\0\5\27"+
    "\6\0\11\27\4\0\1\u01d0\27\27\25\0\5\27\6\0"+
    "\11\27\4\0\11\27\1\u01d1\16\27\25\0\5\27\6\0"+
    "\11\27\4\0\14\27\1\u01d2\13\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\u01d3\26\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\u01d4\26\27\25\0\5\27\6\0"+
    "\11\27\4\0\11\27\1\u01d5\16\27\25\0\5\27\6\0"+
    "\11\27\4\0\23\27\1\u01d6\4\27\25\0\5\27\6\0"+
    "\11\27\4\0\7\27\1\u01d7\20\27\25\0\5\27\6\0"+
    "\11\27\4\0\1\27\1\u01d8\1\u01d9\4\27\1\u01da\5\27"+
    "\1\u01db\2\27\1\u01dc\7\27\25\0\5\27\6\0\11\27"+
    "\4\0\22\27\1\u01dd\5\27\25\0\5\27\6\0\11\27"+
    "\4\0\27\27\1\u01de\25\0\5\27\6\0\6\27\1\u01df"+
    "\2\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\4\27\1\u01e0\23\27\25\0\5\27\6\0\11\27\4\0"+
    "\17\27\1\u01e1\10\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u01e2\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\3\27\1\u01e3\24\27\25\0\5\27\6\0\11\27\4\0"+
    "\15\27\1\u01e4\12\27\25\0\5\27\6\0\11\27\4\0"+
    "\22\27\1\u01e5\5\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u01e6\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\10\27\1\u01e7\17\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u01e8\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\16\27\1\u01e9\11\27\25\0\5\27\6\0\11\27\4\0"+
    "\23\27\1\u01ea\4\27\25\0\5\27\6\0\4\27\1\u01eb"+
    "\4\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\11\27\1\u01ec\16\27\25\0\5\27\6\0\11\27\4\0"+
    "\14\27\1\u01ed\13\27\25\0\5\27\6\0\11\27\4\0"+
    "\17\27\1\u01ee\10\27\25\0\5\27\6\0\11\27\4\0"+
    "\12\27\1\u01ef\15\27\25\0\5\27\6\0\11\27\4\0"+
    "\21\27\1\u01f0\6\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u01f1\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u01f2\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\15\27\1\u01f3\12\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u01f4\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u01f5\7\27\25\0\5\27\6\0\11\27\4\0"+
    "\20\27\1\u01f6\7\27\25\0\5\27\6\0\7\27\1\u01f7"+
    "\1\27\4\0\30\27\25\0\5\27\6\0\11\27\4\0"+
    "\21\27\1\u01f8\6\27\25\0\5\27\6\0\11\27\4\0"+
    "\1\27\1\u01f9\26\27\25\0\5\27\6\0\11\27\4\0"+
    "\14\27\1\u01fa\13\27\25\0\5\27\6\0\11\27\4\0"+
    "\17\27\1\u01fb\10\27\25\0\5\27\6\0\11\27\4\0"+
    "\5\27\1\u01fc\22\27\25\0\5\27\6\0\11\27\4\0"+
    "\27\27\1\u01fd\25\0\5\27\6\0\11\27\4\0\14\27"+
    "\1\u01fe\13\27\25\0\5\27\6\0\11\27\4\0\5\27"+
    "\1\u01ff\22\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u0200\26\27\25\0\5\27\6\0\11\27\4\0\17\27"+
    "\1\u0201\10\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u0202\26\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u0203\26\27\25\0\5\27\6\0\11\27\4\0\21\27"+
    "\1\u0204\6\27\25\0\5\27\6\0\11\27\4\0\1\27"+
    "\1\u0205\26\27\25\0\5\27\6\0\11\27\4\0\2\27"+
    "\1\u0206\25\27\25\0\5\27\6\0\11\27\4\0\1\u0207"+
    "\27\27\25\0\5\27\6\0\11\27\4\0\17\27\1\u0208"+
    "\10\27\25\0\5\27\6\0\11\27\4\0\20\27\1\u0209"+
    "\7\27\25\0\5\27\6\0\11\27\4\0\21\27\1\u020a"+
    "\6\27\25\0\5\27\6\0\11\27\4\0\13\27\1\u020b"+
    "\14\27\25\0\5\27\6\0\11\27\4\0\13\27\1\u020c"+
    "\14\27\25\0\5\27\6\0\11\27\4\0\1\27\1\u020d"+
    "\26\27\25\0\5\27\6\0\11\27\4\0\1\u020e\27\27"+
    "\25\0\5\27\6\0\11\27\4\0\5\27\1\u020f\22\27"+
    "\25\0\5\27\6\0\11\27\4\0\1\u0210\27\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\u0211\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\15\27\1\u0212\12\27\25\0"+
    "\5\27\6\0\11\27\4\0\1\27\1\u0213\26\27\25\0"+
    "\5\27\6\0\11\27\4\0\15\27\1\u0214\12\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u0215\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\4\27\1\u0216\23\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\u0217\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\15\27\1\u0218\12\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u0219\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\u021a\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\21\27\1\u021b\6\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\u021c\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\26\27\1\u021d\1\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\u021e\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\21\27\1\u021f\6\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u0220\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u0221\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\u0222\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\23\27\1\u0223\4\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u0224\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\22\27\1\u0225\5\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u0226\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\u0227\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\20\27\1\u0228\7\27\25\0"+
    "\5\27\6\0\11\27\4\0\5\27\1\u0229\22\27\25\0"+
    "\5\27\6\0\11\27\4\0\17\27\1\u022a\10\27\25\0"+
    "\5\27\6\0\11\27\4\0\16\27\1\u022b\11\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\u022c\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\17\27\1\u022d\10\27\25\0"+
    "\5\27\6\0\11\27\4\0\3\27\1\u022e\24\27\25\0"+
    "\5\27\6\0\11\27\4\0\11\27\1\u022f\16\27\25\0"+
    "\5\27\6\0\11\27\4\0\3\27\1\u0230\24\27\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31050];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\2\1\2\11\2\1\1\11\5\1"+
    "\2\11\3\1\1\11\1\1\3\11\21\1\1\11\1\1"+
    "\4\11\1\0\7\11\1\1\1\0\1\1\1\11\2\0"+
    "\2\11\1\1\3\11\51\1\1\11\2\0\1\1\2\11"+
    "\56\1\1\0\1\11\u018c\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GDShaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 138: break;
          case 2:
            { return GDShaderTypes.OP_NOT;
            }
          // fall through
          case 139: break;
          case 3:
            { return GDShaderTypes.OP_MOD;
            }
          // fall through
          case 140: break;
          case 4:
            { return GDShaderTypes.OP_BIT_AND;
            }
          // fall through
          case 141: break;
          case 5:
            { return GDShaderTypes.PARENTHESIS_OPEN;
            }
          // fall through
          case 142: break;
          case 6:
            { return GDShaderTypes.PARENTHESIS_CLOSE;
            }
          // fall through
          case 143: break;
          case 7:
            { return GDShaderTypes.OP_MUL;
            }
          // fall through
          case 144: break;
          case 8:
            { return GDShaderTypes.OP_ADD;
            }
          // fall through
          case 145: break;
          case 9:
            { return GDShaderTypes.COMMA;
            }
          // fall through
          case 146: break;
          case 10:
            { return GDShaderTypes.OP_SUB;
            }
          // fall through
          case 147: break;
          case 11:
            { return GDShaderTypes.PERIOD;
            }
          // fall through
          case 148: break;
          case 12:
            { return GDShaderTypes.OP_DIV;
            }
          // fall through
          case 149: break;
          case 13:
            { return GDShaderTypes.INT_CONSTANT;
            }
          // fall through
          case 150: break;
          case 14:
            { return GDShaderTypes.COLON;
            }
          // fall through
          case 151: break;
          case 15:
            { return GDShaderTypes.SEMICOLON;
            }
          // fall through
          case 152: break;
          case 16:
            { return GDShaderTypes.OP_LESS;
            }
          // fall through
          case 153: break;
          case 17:
            { return GDShaderTypes.OP_ASSIGN;
            }
          // fall through
          case 154: break;
          case 18:
            { return GDShaderTypes.OP_GREATER;
            }
          // fall through
          case 155: break;
          case 19:
            { return GDShaderTypes.QUESTION;
            }
          // fall through
          case 156: break;
          case 20:
            { return GDShaderTypes.IDENTIFIER;
            }
          // fall through
          case 157: break;
          case 21:
            { return GDShaderTypes.BRACKET_OPEN;
            }
          // fall through
          case 158: break;
          case 22:
            { return GDShaderTypes.BRACKET_CLOSE;
            }
          // fall through
          case 159: break;
          case 23:
            { return GDShaderTypes.OP_BIT_XOR;
            }
          // fall through
          case 160: break;
          case 24:
            { return GDShaderTypes.CURLY_BRACKET_OPEN;
            }
          // fall through
          case 161: break;
          case 25:
            { return GDShaderTypes.OP_BIT_OR;
            }
          // fall through
          case 162: break;
          case 26:
            { return GDShaderTypes.CURLY_BRACKET_CLOSE;
            }
          // fall through
          case 163: break;
          case 27:
            { return GDShaderTypes.OP_BIT_INVERT;
            }
          // fall through
          case 164: break;
          case 28:
            { return GDShaderTypes.OP_NOT_EQUAL;
            }
          // fall through
          case 165: break;
          case 29:
            { return GDShaderTypes.STRING_CONSTANT;
            }
          // fall through
          case 166: break;
          case 30:
            { return GDShaderTypes.OP_ASSIGN_MOD;
            }
          // fall through
          case 167: break;
          case 31:
            { return GDShaderTypes.OP_AND;
            }
          // fall through
          case 168: break;
          case 32:
            { return GDShaderTypes.OP_ASSIGN_MUL;
            }
          // fall through
          case 169: break;
          case 33:
            { return GDShaderTypes.OP_INCREMENT;
            }
          // fall through
          case 170: break;
          case 34:
            { return GDShaderTypes.OP_ASSIGN_ADD;
            }
          // fall through
          case 171: break;
          case 35:
            { return GDShaderTypes.OP_DECREMENT;
            }
          // fall through
          case 172: break;
          case 36:
            { return GDShaderTypes.OP_ASSIGN_SUB;
            }
          // fall through
          case 173: break;
          case 37:
            { return GDShaderTypes.FLOAT_CONSTANT;
            }
          // fall through
          case 174: break;
          case 38:
            { return GDShaderTypes.LINE_COMMENT;
            }
          // fall through
          case 175: break;
          case 39:
            { return GDShaderTypes.OP_ASSIGN_DIV;
            }
          // fall through
          case 176: break;
          case 40:
            { return GDShaderTypes.UINT_CONSTANT;
            }
          // fall through
          case 177: break;
          case 41:
            { return GDShaderTypes.OP_SHIFT_LEFT;
            }
          // fall through
          case 178: break;
          case 42:
            { return GDShaderTypes.OP_LESS_EQUAL;
            }
          // fall through
          case 179: break;
          case 43:
            { return GDShaderTypes.OP_EQUAL;
            }
          // fall through
          case 180: break;
          case 44:
            { return GDShaderTypes.OP_GREATER_EQUAL;
            }
          // fall through
          case 181: break;
          case 45:
            { return GDShaderTypes.OP_SHIFT_RIGHT;
            }
          // fall through
          case 182: break;
          case 46:
            { return GDShaderTypes.CF_DO;
            }
          // fall through
          case 183: break;
          case 47:
            { return GDShaderTypes.CF_IF;
            }
          // fall through
          case 184: break;
          case 48:
            { return GDShaderTypes.ARG_IN;
            }
          // fall through
          case 185: break;
          case 49:
            { return GDShaderTypes.OP_OR;
            }
          // fall through
          case 186: break;
          case 50:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_LEFT;
            }
          // fall through
          case 187: break;
          case 51:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_RIGHT;
            }
          // fall through
          case 188: break;
          case 52:
            { return GDShaderTypes.CF_FOR;
            }
          // fall through
          case 189: break;
          case 53:
            { return GDShaderTypes.TYPE_INT;
            }
          // fall through
          case 190: break;
          case 54:
            { return GDShaderTypes.ARG_OUT;
            }
          // fall through
          case 191: break;
          case 55:
            { return GDShaderTypes.BLOCK_COMMENT;
            }
          // fall through
          case 192: break;
          case 56:
            { return GDShaderTypes.TYPE_BOOL;
            }
          // fall through
          case 193: break;
          case 57:
            { return GDShaderTypes.CF_CASE;
            }
          // fall through
          case 194: break;
          case 58:
            { return GDShaderTypes.CF_ELSE;
            }
          // fall through
          case 195: break;
          case 59:
            { return GDShaderTypes.INTERPOLATION_FLAT;
            }
          // fall through
          case 196: break;
          case 60:
            { return GDShaderTypes.PRECISION_LOW;
            }
          // fall through
          case 197: break;
          case 61:
            { return GDShaderTypes.TYPE_MAT2;
            }
          // fall through
          case 198: break;
          case 62:
            { return GDShaderTypes.TYPE_MAT3;
            }
          // fall through
          case 199: break;
          case 63:
            { return GDShaderTypes.TYPE_MAT4;
            }
          // fall through
          case 200: break;
          case 64:
            { return GDShaderTypes.TRUE;
            }
          // fall through
          case 201: break;
          case 65:
            { return GDShaderTypes.TYPE_UINT;
            }
          // fall through
          case 202: break;
          case 66:
            { return GDShaderTypes.TYPE_VEC2;
            }
          // fall through
          case 203: break;
          case 67:
            { return GDShaderTypes.TYPE_VEC3;
            }
          // fall through
          case 204: break;
          case 68:
            { return GDShaderTypes.TYPE_VEC4;
            }
          // fall through
          case 205: break;
          case 69:
            { return GDShaderTypes.TYPE_VOID;
            }
          // fall through
          case 206: break;
          case 70:
            { return GDShaderTypes.CF_BREAK;
            }
          // fall through
          case 207: break;
          case 71:
            { return GDShaderTypes.TYPE_BVEC2;
            }
          // fall through
          case 208: break;
          case 72:
            { return GDShaderTypes.TYPE_BVEC3;
            }
          // fall through
          case 209: break;
          case 73:
            { return GDShaderTypes.TYPE_BVEC4;
            }
          // fall through
          case 210: break;
          case 74:
            { return GDShaderTypes.CONST;
            }
          // fall through
          case 211: break;
          case 75:
            { return GDShaderTypes.FALSE;
            }
          // fall through
          case 212: break;
          case 76:
            { return GDShaderTypes.TYPE_FLOAT;
            }
          // fall through
          case 213: break;
          case 77:
            { return GDShaderTypes.PRECISION_HIGH;
            }
          // fall through
          case 214: break;
          case 78:
            { return GDShaderTypes.ARG_INOUT;
            }
          // fall through
          case 215: break;
          case 79:
            { return GDShaderTypes.TYPE_IVEC2;
            }
          // fall through
          case 216: break;
          case 80:
            { return GDShaderTypes.TYPE_IVEC3;
            }
          // fall through
          case 217: break;
          case 81:
            { return GDShaderTypes.TYPE_IVEC4;
            }
          // fall through
          case 218: break;
          case 82:
            { return GDShaderTypes.TYPE_UVEC2;
            }
          // fall through
          case 219: break;
          case 83:
            { return GDShaderTypes.TYPE_UVEC3;
            }
          // fall through
          case 220: break;
          case 84:
            { return GDShaderTypes.TYPE_UVEC4;
            }
          // fall through
          case 221: break;
          case 85:
            { return GDShaderTypes.CF_WHILE;
            }
          // fall through
          case 222: break;
          case 86:
            { return GDShaderTypes.GLOBAL;
            }
          // fall through
          case 223: break;
          case 87:
            { return GDShaderTypes.CF_RETURN;
            }
          // fall through
          case 224: break;
          case 88:
            { return GDShaderTypes.INTERPOLATION_SMOOTH;
            }
          // fall through
          case 225: break;
          case 89:
            { return GDShaderTypes.STRUCT;
            }
          // fall through
          case 226: break;
          case 90:
            { return GDShaderTypes.CF_SWITCH;
            }
          // fall through
          case 227: break;
          case 91:
            { return GDShaderTypes.CF_DEFAULT;
            }
          // fall through
          case 228: break;
          case 92:
            { return GDShaderTypes.CF_DISCARD;
            }
          // fall through
          case 229: break;
          case 93:
            { return GDShaderTypes.PRECISION_MEDIUM;
            }
          // fall through
          case 230: break;
          case 94:
            { return GDShaderTypes.UNIFORM;
            }
          // fall through
          case 231: break;
          case 95:
            { return GDShaderTypes.VARYING;
            }
          // fall through
          case 232: break;
          case 96:
            { return GDShaderTypes.CF_CONTINUE;
            }
          // fall through
          case 233: break;
          case 97:
            { return GDShaderTypes.INSTANCE;
            }
          // fall through
          case 234: break;
          case 98:
            { return GDShaderTypes.HINT_ENUM;
            }
          // fall through
          case 235: break;
          case 99:
            { return GDShaderTypes.TYPE_SAMPLER2D;
            }
          // fall through
          case 236: break;
          case 100:
            { return GDShaderTypes.TYPE_SAMPLER3D;
            }
          // fall through
          case 237: break;
          case 101:
            { return GDShaderTypes.HINT_RANGE;
            }
          // fall through
          case 238: break;
          case 102:
            { return GDShaderTypes.TYPE_ISAMPLER2D;
            }
          // fall through
          case 239: break;
          case 103:
            { return GDShaderTypes.TYPE_ISAMPLER3D;
            }
          // fall through
          case 240: break;
          case 104:
            { return GDShaderTypes.TYPE_USAMPLER2D;
            }
          // fall through
          case 241: break;
          case 105:
            { return GDShaderTypes.TYPE_USAMPLER3D;
            }
          // fall through
          case 242: break;
          case 106:
            { return GDShaderTypes.HINT_NORMAL_TEXTURE;
            }
          // fall through
          case 243: break;
          case 107:
            { return GDShaderTypes.RENDER_MODE;
            }
          // fall through
          case 244: break;
          case 108:
            { return GDShaderTypes.TYPE_SAMPLERCUBE;
            }
          // fall through
          case 245: break;
          case 109:
            { return GDShaderTypes.SHADER_TYPE;
            }
          // fall through
          case 246: break;
          case 110:
            { return GDShaderTypes.HINT_SOURCE_COLOR;
            }
          // fall through
          case 247: break;
          case 111:
            { return GDShaderTypes.STENCIL_MODE;
            }
          // fall through
          case 248: break;
          case 112:
            { return GDShaderTypes.FILTER_LINEAR;
            }
          // fall through
          case 249: break;
          case 113:
            { return GDShaderTypes.REPEAT_ENABLE;
            }
          // fall through
          case 250: break;
          case 114:
            { return GDShaderTypes.FILTER_NEAREST;
            }
          // fall through
          case 251: break;
          case 115:
            { return GDShaderTypes.UNIFORM_GROUP;
            }
          // fall through
          case 252: break;
          case 116:
            { return GDShaderTypes.HINT_INSTANCE_INDEX;
            }
          // fall through
          case 253: break;
          case 117:
            { return GDShaderTypes.REPEAT_DISABLE;
            }
          // fall through
          case 254: break;
          case 118:
            { return GDShaderTypes.HINT_ANISOTROPY_TEXTURE;
            }
          // fall through
          case 255: break;
          case 119:
            { return GDShaderTypes.HINT_ROUGHNESS_A;
            }
          // fall through
          case 256: break;
          case 120:
            { return GDShaderTypes.HINT_ROUGHNESS_B;
            }
          // fall through
          case 257: break;
          case 121:
            { return GDShaderTypes.HINT_ROUGHNESS_G;
            }
          // fall through
          case 258: break;
          case 122:
            { return GDShaderTypes.HINT_ROUGHNESS_R;
            }
          // fall through
          case 259: break;
          case 123:
            { return GDShaderTypes.TYPE_SAMPLERCUBEARRAY;
            }
          // fall through
          case 260: break;
          case 124:
            { return GDShaderTypes.HINT_DEFAULT_BLACK_TEXTURE;
            }
          // fall through
          case 261: break;
          case 125:
            { return GDShaderTypes.HINT_DEFAULT_WHITE_TEXTURE;
            }
          // fall through
          case 262: break;
          case 126:
            { return GDShaderTypes.HINT_DEPTH_TEXTURE;
            }
          // fall through
          case 263: break;
          case 127:
            { return GDShaderTypes.TYPE_SAMPLEREXT;
            }
          // fall through
          case 264: break;
          case 128:
            { return GDShaderTypes.HINT_ROUGHNESS_GRAY;
            }
          // fall through
          case 265: break;
          case 129:
            { return GDShaderTypes.HINT_SCREEN_TEXTURE;
            }
          // fall through
          case 266: break;
          case 130:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP;
            }
          // fall through
          case 267: break;
          case 131:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP;
            }
          // fall through
          case 268: break;
          case 132:
            { return GDShaderTypes.HINT_ROUGHNESS_NORMAL_TEXTURE;
            }
          // fall through
          case 269: break;
          case 133:
            { return GDShaderTypes.HINT_COLOR_CONVERSION_DISABLED;
            }
          // fall through
          case 270: break;
          case 134:
            { return GDShaderTypes.HINT_DEFAULT_TRANSPARENT_TEXTURE;
            }
          // fall through
          case 271: break;
          case 135:
            { return GDShaderTypes.HINT_NORMAL_ROUGHNESS_TEXTURE;
            }
          // fall through
          case 272: break;
          case 136:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 273: break;
          case 137:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
