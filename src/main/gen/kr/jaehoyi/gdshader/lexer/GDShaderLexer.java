// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GDShader.flex

package kr.jaehoyi.gdshader.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kr.jaehoyi.gdshader.psi.GDShaderTypes;
import com.intellij.psi.TokenType;


public class GDShaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\5\23\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\10\36\1\43\3\36\1\44\1\36\1\45\5\36"+
    "\1\46\1\47\1\50\1\51\1\52\1\0\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\36"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\36\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\36"+
    "\1\102\1\103\1\104\1\105\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\21\25\1\31\1\32\1\33\1\34\1\2"+
    "\1\1\1\35\1\0\1\36\5\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\1\50"+
    "\2\0\1\46\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\7\25\1\57\10\25\1\60\1\61\26\25\1\62\5\0"+
    "\1\63\5\0\1\46\1\64\1\65\15\25\1\66\6\25"+
    "\1\67\5\25\1\70\23\25\5\0\1\63\1\0\2\63"+
    "\4\0\1\71\1\72\2\25\1\73\5\25\1\74\2\25"+
    "\1\75\11\25\1\76\1\77\1\100\1\101\13\25\1\102"+
    "\1\103\4\25\1\104\1\105\1\106\1\107\1\25\1\0"+
    "\1\110\1\111\2\0\2\63\3\0\1\112\1\113\1\114"+
    "\1\115\1\25\1\116\3\25\1\117\1\25\1\120\2\25"+
    "\1\121\1\25\1\122\2\25\1\123\1\124\1\125\15\25"+
    "\1\126\1\127\1\130\1\25\1\131\3\0\1\132\1\133"+
    "\1\134\1\63\2\0\1\135\5\25\1\136\14\25\1\137"+
    "\2\25\1\140\2\25\1\141\1\142\3\25\4\0\1\143"+
    "\1\0\1\144\1\0\2\25\1\145\1\146\13\25\1\147"+
    "\6\25\1\150\1\25\1\151\1\152\1\0\1\153\1\0"+
    "\1\25\1\154\13\25\1\155\14\25\2\0\7\25\1\156"+
    "\12\25\1\157\1\160\17\25\1\161\3\25\1\162\1\163"+
    "\10\25\1\164\1\165\7\25\1\166\3\25\1\167\2\25"+
    "\1\170\1\25\1\171\21\25\1\172\1\173\1\25\1\174"+
    "\12\25\1\175\4\25\1\176\1\177\10\25\1\200\1\201"+
    "\5\25\1\202\21\25\1\203\1\204\1\205\1\25\1\206"+
    "\1\25\1\207\20\25\1\210\1\25\1\211\1\212\4\25"+
    "\1\213\5\25\1\214\1\25\1\215\1\25\1\216\6\25"+
    "\1\217\2\25\1\220\12\25\1\221\2\25\1\222\17\25"+
    "\1\223\4\25\1\224\1\25\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\214\0\214\0\u0276\0\u02bc\0\214\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\214\0\214\0\u0460\0\u04a6\0\u04ec"+
    "\0\214\0\u0532\0\214\0\214\0\214\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\214\0\u0a1e"+
    "\0\214\0\214\0\u0a64\0\u0aaa\0\214\0\u015e\0\214\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\u0c4e\0\u0c94\0\u0cda\0\214\0\u03d4"+
    "\0\u0d20\0\214\0\214\0\u0d66\0\214\0\214\0\214\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0532"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u0532\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\214\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\214\0\214\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u0532\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u0532\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u0532\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\214\0\u0532\0\u2aee\0\u2b34\0\u0532\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u0532\0\u2cd8\0\u2d1e\0\u0532"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u0532\0\u0532\0\u0532\0\u0532\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u0532\0\u0532\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u0532\0\u0532"+
    "\0\u0532\0\u0532\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u0532\0\u0532\0\u0532"+
    "\0\u0532\0\u36f6\0\u0532\0\u373c\0\u3782\0\u37c8\0\u0532\0\u380e"+
    "\0\u0532\0\u3854\0\u389a\0\u0532\0\u38e0\0\u0532\0\u3926\0\u396c"+
    "\0\u0532\0\u0532\0\u0532\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u0532\0\u0532\0\u0532\0\u3d40\0\u0532\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042"+
    "\0\u4088\0\u40ce\0\u4114\0\u415a\0\u0532\0\u41a0\0\u41e6\0\u422c"+
    "\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c"+
    "\0\u44a2\0\u0532\0\u44e8\0\u452e\0\u0532\0\u4574\0\u45ba\0\u0532"+
    "\0\u0532\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u0532\0\u0532"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u0532\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62"+
    "\0\u4da8\0\u4dee\0\u0532\0\u4e34\0\u0532\0\u4e7a\0\u4ec0\0\u4f06"+
    "\0\u4f4c\0\u4f92\0\u0532\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0"+
    "\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320"+
    "\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550"+
    "\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780"+
    "\0\u57c6\0\u580c\0\u5852\0\u5898\0\u0532\0\u58de\0\u5924\0\u596a"+
    "\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u0532"+
    "\0\u0532\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e"+
    "\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e"+
    "\0\u0532\0\u5fb4\0\u5ffa\0\u6040\0\u0532\0\u0532\0\u6086\0\u60cc"+
    "\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u0532\0\u0532"+
    "\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0"+
    "\0\u64e6\0\u652c\0\u6572\0\u0532\0\u65b8\0\u65fe\0\u6644\0\u668a"+
    "\0\u0532\0\u66d0\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874"+
    "\0\u68ba\0\u6900\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4"+
    "\0\u6aea\0\u6b30\0\u0532\0\u0532\0\u6b76\0\u6bbc\0\u6c02\0\u6c48"+
    "\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u6dec\0\u6e32\0\u6e78"+
    "\0\u0532\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u0532\0\u701c"+
    "\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a\0\u71c0\0\u7206\0\u0532"+
    "\0\u0532\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364\0\u0532\0\u73aa"+
    "\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e\0\u77c4\0\u780a"+
    "\0\u0532\0\u0532\0\u7850\0\u7896\0\u0532\0\u78dc\0\u0532\0\u7922"+
    "\0\u7968\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52"+
    "\0\u7b98\0\u7bde\0\u7c24\0\u7c6a\0\u7cb0\0\u7cf6\0\u7d3c\0\u0532"+
    "\0\u7d82\0\u0532\0\u0532\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u0532"+
    "\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u0532\0\u803e\0\u0532"+
    "\0\u8084\0\u80ca\0\u8110\0\u8156\0\u819c\0\u81e2\0\u8228\0\u826e"+
    "\0\u82b4\0\u82fa\0\u8340\0\u0532\0\u8386\0\u83cc\0\u8412\0\u8458"+
    "\0\u849e\0\u84e4\0\u852a\0\u8570\0\u85b6\0\u85fc\0\u0532\0\u8642"+
    "\0\u8688\0\u0532\0\u86ce\0\u8714\0\u875a\0\u87a0\0\u87e6\0\u882c"+
    "\0\u8872\0\u88b8\0\u88fe\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c"+
    "\0\u8aa2\0\u0532\0\u8ae8\0\u8b2e\0\u8b74\0\u8bba\0\u0532\0\u8c00"+
    "\0\u0532";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\4\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\11\32\1\33\1\3\1\34\1\35\2\32\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\32"+
    "\1\46\1\47\1\32\1\50\1\32\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\32\1\57\1\60\1\61\1\62"+
    "\1\3\1\63\1\4\1\0\1\4\1\5\1\6\1\64"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\4\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\11\32\1\33\1\3\1\34\1\35\2\32"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\32\1\46\1\47\1\32\1\50\1\32\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\32\1\57\1\60\1\61"+
    "\1\62\107\0\2\4\1\0\1\4\133\0\1\65\53\0"+
    "\2\66\1\0\3\66\1\67\40\66\1\70\36\66\57\0"+
    "\1\71\3\0\1\72\5\0\1\73\3\0\1\74\42\0"+
    "\1\75\64\0\1\76\126\0\1\77\70\0\1\100\14\0"+
    "\1\101\72\0\1\102\12\0\1\103\75\0\5\104\73\0"+
    "\1\105\4\0\1\106\10\0\1\107\73\0\1\104\1\0"+
    "\5\110\12\0\1\111\1\112\14\0\1\111\1\112\45\0"+
    "\1\104\1\0\5\23\12\0\1\111\1\112\2\0\1\113"+
    "\11\0\1\111\1\112\14\0\1\113\41\0\1\114\1\115"+
    "\105\0\1\116\105\0\1\117\1\120\74\0\5\32\6\0"+
    "\11\32\4\0\30\32\26\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\121\1\32\1\122\3\32\1\123\3\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\124\14\32\1\125"+
    "\11\32\26\0\5\32\6\0\11\32\4\0\5\32\1\126"+
    "\3\32\1\127\4\32\1\130\11\32\26\0\5\32\6\0"+
    "\11\32\4\0\13\32\1\131\14\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\32\1\132\7\32\1\133\1\32\1\134"+
    "\2\32\1\135\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\136\4\32\1\137\7\32\26\0\5\32\6\0"+
    "\11\32\4\0\11\32\1\140\16\32\26\0\5\32\6\0"+
    "\11\32\4\0\6\32\1\141\6\32\1\142\3\32\1\143"+
    "\2\32\1\144\3\32\26\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\145\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\146\3\32\1\147\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\23\32\1\150\4\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\151\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\32\1\152\6\32\1\153\3\32\1\154"+
    "\1\32\1\155\3\32\1\156\2\32\1\157\2\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\160\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\161\3\32\1\162"+
    "\3\32\1\163\2\32\1\164\3\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\32\1\165\3\32\1\166\10\32\1\167"+
    "\11\32\26\0\5\32\6\0\11\32\4\0\10\32\1\170"+
    "\17\32\107\0\1\171\3\0\1\63\1\4\1\0\1\4"+
    "\2\0\1\172\154\0\1\173\1\71\3\0\1\72\5\0"+
    "\1\73\3\0\1\74\10\0\2\66\3\0\101\66\65\0"+
    "\1\174\1\0\1\175\2\0\1\176\73\0\1\177\6\0"+
    "\1\200\110\0\1\201\102\0\1\202\40\0\5\104\12\0"+
    "\1\111\1\112\14\0\1\111\1\112\25\0\14\105\1\203"+
    "\71\105\2\106\1\0\1\106\1\0\101\106\15\0\1\204"+
    "\1\0\1\204\2\0\5\205\111\0\1\206\105\0\1\207"+
    "\75\0\5\32\6\0\11\32\4\0\16\32\1\210\11\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\211\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\212\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\21\32\1\213\6\32"+
    "\26\0\5\32\6\0\11\32\4\0\13\32\1\214\1\32"+
    "\1\215\12\32\26\0\5\32\6\0\11\32\4\0\6\32"+
    "\1\216\21\32\26\0\5\32\6\0\11\32\4\0\21\32"+
    "\1\217\6\32\26\0\5\32\6\0\11\32\4\0\21\32"+
    "\1\220\6\32\26\0\5\32\6\0\11\32\4\0\13\32"+
    "\1\221\14\32\26\0\5\32\6\0\11\32\4\0\13\32"+
    "\1\222\14\32\26\0\5\32\6\0\11\32\4\0\1\32"+
    "\1\223\14\32\1\224\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\225\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\226\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\227\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\7\32\1\230\5\32\1\231\12\32\26\0\5\32"+
    "\6\0\11\32\4\0\16\32\1\232\2\32\1\233\1\234"+
    "\5\32\26\0\5\32\6\0\11\32\4\0\1\32\1\235"+
    "\26\32\26\0\5\32\6\0\11\32\4\0\5\32\1\236"+
    "\22\32\26\0\5\32\6\0\11\32\4\0\25\32\1\237"+
    "\2\32\26\0\5\32\6\0\11\32\4\0\22\32\1\240"+
    "\5\32\26\0\5\32\6\0\11\32\4\0\4\32\1\241"+
    "\23\32\26\0\5\32\6\0\11\32\4\0\22\32\1\242"+
    "\5\32\26\0\5\32\6\0\11\32\4\0\15\32\1\243"+
    "\1\32\1\244\2\32\1\245\5\32\26\0\5\32\6\0"+
    "\11\32\4\0\14\32\1\246\13\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\32\1\247\26\32\26\0\5\32\6\0"+
    "\11\32\4\0\16\32\1\250\11\32\26\0\5\32\6\0"+
    "\11\32\4\0\23\32\1\251\4\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\252\12\32\1\253\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\254\16\32\26\0"+
    "\5\32\6\0\11\32\4\0\23\32\1\255\4\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\256\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\257\16\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\260\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\261\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\262\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\3\32\1\263\24\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\264\16\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\265\16\32\62\0"+
    "\1\173\106\0\1\266\111\0\1\267\7\0\1\270\70\0"+
    "\1\271\121\0\1\272\13\0\2\273\1\0\1\273\1\0"+
    "\42\273\1\274\6\273\1\275\10\273\1\276\16\273\55\0"+
    "\1\277\103\0\1\300\110\0\1\301\27\0\14\105\1\302"+
    "\4\105\1\303\64\105\22\0\5\205\101\0\5\205\13\0"+
    "\1\112\15\0\1\112\47\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\304\14\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\305\26\32\26\0\5\32\6\0\11\32\4\0"+
    "\3\32\1\306\24\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\307\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\310\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\21\32\1\311\1\312\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\32\1\313\26\32\26\0\5\32\6\0\11\32"+
    "\4\0\3\32\1\314\24\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\315\22\32\26\0\5\32\6\0\11\32"+
    "\4\0\21\32\1\316\6\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\317\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\320\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\32\1\321\26\32\26\0\5\32\6\0\11\32"+
    "\4\0\2\32\1\322\25\32\26\0\5\32\6\0\11\32"+
    "\4\0\23\32\1\323\4\32\26\0\5\32\6\0\11\32"+
    "\4\0\10\32\1\324\17\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\325\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\23\32\1\326\4\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\327\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\14\32\1\330\13\32\26\0\5\32\6\0\11\32"+
    "\4\0\3\32\1\331\24\32\26\0\5\32\6\0\11\32"+
    "\4\0\17\32\1\332\10\32\26\0\2\32\1\333\1\334"+
    "\1\335\6\0\11\32\4\0\30\32\26\0\5\32\6\0"+
    "\11\32\4\0\11\32\1\336\16\32\26\0\5\32\6\0"+
    "\11\32\4\0\4\32\1\337\23\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\340\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\23\32\1\341\4\32\26\0\5\32\6\0"+
    "\11\32\4\0\17\32\1\342\10\32\26\0\5\32\6\0"+
    "\11\32\4\0\4\32\1\343\23\32\26\0\5\32\6\0"+
    "\11\32\4\0\16\32\1\344\11\32\26\0\5\32\6\0"+
    "\11\32\4\0\20\32\1\345\7\32\26\0\5\32\6\0"+
    "\11\32\4\0\15\32\1\346\12\32\26\0\5\32\6\0"+
    "\11\32\4\0\23\32\1\347\4\32\26\0\5\32\6\0"+
    "\11\32\4\0\22\32\1\350\5\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\351\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\22\32\1\352\5\32\26\0\5\32\6\0"+
    "\11\32\4\0\6\32\1\353\21\32\26\0\5\32\6\0"+
    "\11\32\4\0\14\32\1\354\13\32\26\0\5\32\6\0"+
    "\11\32\4\0\3\32\1\355\24\32\26\0\5\32\6\0"+
    "\11\32\4\0\27\32\1\356\26\0\2\32\1\357\1\360"+
    "\1\361\6\0\11\32\4\0\30\32\26\0\5\32\6\0"+
    "\11\32\4\0\4\32\1\362\23\32\26\0\5\32\6\0"+
    "\11\32\4\0\13\32\1\363\14\32\64\0\1\364\105\0"+
    "\1\365\104\0\1\366\111\0\1\367\112\0\1\370\15\0"+
    "\2\273\1\0\1\273\1\0\42\273\1\274\36\273\1\0"+
    "\1\274\1\273\1\0\1\273\101\0\2\273\1\0\1\273"+
    "\1\0\42\273\1\274\7\273\1\371\30\273\1\0\1\273"+
    "\1\0\42\273\1\274\6\273\1\372\27\273\65\0\1\373"+
    "\101\0\1\374\103\0\1\375\26\0\14\105\1\302\4\105"+
    "\1\0\64\105\22\0\5\32\6\0\11\32\4\0\12\32"+
    "\1\376\15\32\26\0\2\32\1\377\1\u0100\1\u0101\6\0"+
    "\11\32\4\0\30\32\26\0\5\32\6\0\11\32\4\0"+
    "\20\32\1\u0102\7\32\26\0\5\32\6\0\11\32\4\0"+
    "\22\32\1\u0103\5\32\26\0\5\32\6\0\11\32\4\0"+
    "\11\32\1\u0104\16\32\26\0\5\32\6\0\11\32\4\0"+
    "\23\32\1\u0105\4\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\u0106\26\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u0107\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u0108\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\22\32\1\u0109\5\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\u010a\26\32\26\0\5\32\6\0\11\32\4\0"+
    "\17\32\1\u010b\10\32\26\0\5\32\6\0\11\32\4\0"+
    "\17\32\1\u010c\10\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\u010d\27\32\26\0\5\32\6\0\11\32\4\0\22\32"+
    "\1\u010e\5\32\26\0\5\32\6\0\11\32\4\0\1\32"+
    "\1\u010f\26\32\26\0\5\32\6\0\11\32\4\0\17\32"+
    "\1\u0110\10\32\26\0\2\32\1\u0111\1\u0112\1\u0113\6\0"+
    "\11\32\4\0\30\32\26\0\5\32\6\0\11\32\4\0"+
    "\23\32\1\u0114\4\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u0115\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\u0116\26\32\26\0\5\32\6\0\11\32\4\0"+
    "\20\32\1\u0117\7\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\u0118\14\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u0119\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\22\32\1\u011a\5\32\26\0\5\32\6\0\11\32\4\0"+
    "\3\32\1\u011b\24\32\26\0\5\32\6\0\11\32\4\0"+
    "\3\32\1\u011c\24\32\26\0\5\32\6\0\11\32\4\0"+
    "\3\32\1\u011d\24\32\26\0\5\32\6\0\11\32\4\0"+
    "\3\32\1\u011e\24\32\26\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\u011f\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\17\32\1\u0120\10\32\26\0\2\32\1\u0121\1\u0122\1\u0123"+
    "\6\0\11\32\4\0\30\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u0124\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\u0125\22\32\67\0\1\u0126\22\0\2\365"+
    "\1\0\1\365\1\0\42\365\1\u0127\36\365\2\366\1\0"+
    "\1\366\1\0\42\366\1\u0128\36\366\60\0\1\u0129\117\0"+
    "\1\u012a\13\0\2\273\1\0\1\273\1\0\42\273\1\274"+
    "\10\273\1\u012b\27\273\1\0\1\273\1\0\42\273\1\274"+
    "\7\273\1\u012c\26\273\75\0\1\u012d\76\0\1\u012e\77\0"+
    "\1\u012f\47\0\5\32\6\0\11\32\4\0\1\u0130\27\32"+
    "\26\0\5\32\6\0\11\32\4\0\15\32\1\u0131\12\32"+
    "\26\0\5\32\6\0\11\32\4\0\13\32\1\u0132\14\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0133\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0134\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\13\32\1\u0135\14\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\u0136\27\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u0137\2\32\1\u0138"+
    "\1\u0139\7\32\1\u013a\2\32\1\u013b\1\u013c\6\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u013d\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\13\32\1\u013e\14\32\26\0"+
    "\5\32\6\0\11\32\4\0\14\32\1\u013f\13\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u0140\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\22\32\1\u0141\5\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u0142\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u0143\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u0144\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\10\32\1\u0145\17\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u0146\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\11\32\1\u0147\16\32\26\0"+
    "\5\32\6\0\11\32\4\0\22\32\1\u0148\5\32\26\0"+
    "\5\32\6\0\11\32\4\0\10\32\1\u0149\17\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u014a\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\13\32\1\u014b\14\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u014c\12\32\73\0"+
    "\1\u014d\17\0\1\u0127\1\365\1\0\1\365\102\0\1\u0128"+
    "\1\366\1\0\1\366\101\0\2\u0129\1\0\1\u0129\1\0"+
    "\42\u0129\1\u014e\36\u0129\2\u012a\1\0\1\u012a\1\0\42\u012a"+
    "\1\u014f\36\u012a\2\u012b\1\0\1\u012b\1\0\42\u012b\1\u0150"+
    "\36\u012b\2\273\1\0\1\273\1\0\42\273\1\274\10\273"+
    "\1\u0151\25\273\56\0\1\u0152\102\0\1\u0153\32\0\2\u012f"+
    "\1\0\1\u012f\1\0\42\u012f\1\u0154\36\u012f\22\0\5\32"+
    "\6\0\11\32\4\0\3\32\1\u0155\24\32\26\0\5\32"+
    "\6\0\11\32\4\0\23\32\1\u0156\4\32\26\0\5\32"+
    "\6\0\11\32\4\0\22\32\1\u0157\5\32\26\0\5\32"+
    "\6\0\11\32\4\0\4\32\1\u0158\23\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u0159\27\32\26\0\5\32\6\0"+
    "\11\32\4\0\23\32\1\u015a\4\32\26\0\5\32\6\0"+
    "\11\32\4\0\15\32\1\u015b\12\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\u015c\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\15\32\1\u015d\12\32\26\0\5\32\6\0"+
    "\11\32\4\0\16\32\1\u015e\11\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\32\1\u015f\14\32\1\u0160\11\32\26\0"+
    "\5\32\6\0\11\32\4\0\3\32\1\u0161\24\32\26\0"+
    "\5\32\6\0\11\32\4\0\3\32\1\u0162\24\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u0163\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\17\32\1\u0164\10\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\u0165\27\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u0166\27\32\26\0\5\32\6\0"+
    "\11\32\4\0\20\32\1\u0167\7\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\u0168\27\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\u0169\27\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\u016a\14\32\26\0\5\32\6\0\11\32\4\0"+
    "\14\32\1\u016b\13\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u016c\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\7\32\1\u016d\20\32\63\0\1\u016e\27\0\1\u014e\1\u0129"+
    "\1\0\1\u0129\102\0\1\u014f\1\u012a\1\0\1\u012a\102\0"+
    "\1\u0150\1\u012b\1\0\1\u012b\101\0\2\u0151\1\0\1\u0151"+
    "\1\0\42\u0151\1\u016f\36\u0151\57\0\1\u0170\26\0\2\u0153"+
    "\1\0\1\u0153\1\0\42\u0153\1\u0171\36\u0153\1\0\1\u0154"+
    "\1\u012f\1\0\1\u012f\123\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\u0172\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u0173\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\u0174\1\32\1\u0175\12\32\26\0\5\32\6\0"+
    "\11\32\4\0\15\32\1\u0176\12\32\26\0\5\32\6\0"+
    "\11\32\4\0\11\32\1\u0177\16\32\26\0\5\32\6\0"+
    "\11\32\4\0\6\32\1\u0178\10\32\1\u0179\10\32\26\0"+
    "\5\32\6\0\11\32\4\0\23\32\1\u017a\4\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u017b\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u017c\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\23\32\1\u017d\4\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u017e\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u017f\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u0180\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\14\32\1\u0181\13\32\26\0"+
    "\5\32\6\0\11\32\4\0\4\32\1\u0182\1\u0183\22\32"+
    "\26\0\2\32\1\u0184\1\u0185\1\32\6\0\2\32\1\u0186"+
    "\1\32\1\u0187\4\32\4\0\30\32\26\0\5\32\6\0"+
    "\11\32\4\0\22\32\1\u0188\5\32\26\0\5\32\6\0"+
    "\11\32\4\0\3\32\1\u0189\24\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\u018a\27\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u018b\7\32\4\0\2\u016e\1\0\1\u016e"+
    "\1\0\42\u016e\1\u018c\36\u016e\1\0\1\u016f\1\u0151\1\0"+
    "\1\u0151\101\0\2\u0170\1\0\1\u0170\1\0\42\u0170\1\u018d"+
    "\36\u0170\1\0\1\u0171\1\u0153\1\0\1\u0153\123\0\5\32"+
    "\6\0\11\32\4\0\24\32\1\u018e\3\32\26\0\5\32"+
    "\6\0\11\32\4\0\11\32\1\u018f\16\32\26\0\5\32"+
    "\6\0\11\32\4\0\5\32\1\u0190\22\32\26\0\5\32"+
    "\6\0\11\32\4\0\11\32\1\u0191\16\32\26\0\5\32"+
    "\6\0\11\32\4\0\21\32\1\u0192\6\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\32\1\u0193\26\32\26\0\5\32"+
    "\6\0\11\32\4\0\22\32\1\u0194\5\32\26\0\5\32"+
    "\6\0\11\32\4\0\14\32\1\u0195\13\32\26\0\5\32"+
    "\6\0\11\32\4\0\14\32\1\u0196\13\32\26\0\5\32"+
    "\6\0\11\32\4\0\7\32\1\u0197\20\32\26\0\5\32"+
    "\6\0\11\32\4\0\7\32\1\u0198\20\32\26\0\5\32"+
    "\6\0\11\32\4\0\5\32\1\u0199\22\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u019a\27\32\26\0\2\32\1\u019b"+
    "\1\u019c\1\32\6\0\11\32\4\0\30\32\26\0\5\32"+
    "\6\0\11\32\4\0\16\32\1\u019d\11\32\26\0\5\32"+
    "\6\0\11\32\4\0\11\32\1\u019e\16\32\26\0\5\32"+
    "\6\0\11\32\4\0\15\32\1\u019f\12\32\26\0\5\32"+
    "\6\0\3\32\1\u01a0\5\32\4\0\30\32\26\0\5\32"+
    "\6\0\3\32\1\u01a1\5\32\4\0\30\32\26\0\5\32"+
    "\6\0\11\32\4\0\23\32\1\u01a2\4\32\26\0\5\32"+
    "\6\0\11\32\4\0\26\32\1\u01a3\1\32\26\0\5\32"+
    "\6\0\11\32\4\0\27\32\1\u01a4\26\0\5\32\6\0"+
    "\11\32\4\0\16\32\1\u01a5\11\32\26\0\5\32\6\0"+
    "\11\32\4\0\14\32\1\u01a6\13\32\26\0\2\32\1\u01a7"+
    "\1\u01a8\1\32\6\0\11\32\4\0\30\32\5\0\1\u018c"+
    "\1\u016e\1\0\1\u016e\102\0\1\u018d\1\u0170\1\0\1\u0170"+
    "\123\0\5\32\6\0\11\32\4\0\5\32\1\u01a9\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\15\32\1\u01aa\12\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\32\1\u01ab\26\32"+
    "\26\0\5\32\6\0\11\32\4\0\6\32\1\u01ac\21\32"+
    "\26\0\5\32\6\0\11\32\4\0\16\32\1\u01ad\11\32"+
    "\26\0\5\32\6\0\11\32\4\0\23\32\1\u01ae\4\32"+
    "\26\0\5\32\6\0\11\32\4\0\10\32\1\u01af\17\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\32\1\u01b0\26\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u01b1\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\10\32\1\u01b2\17\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u01b3\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\11\32\1\u01b4\16\32"+
    "\26\0\5\32\6\0\3\32\1\u01b5\5\32\4\0\30\32"+
    "\26\0\5\32\6\0\3\32\1\u01b6\5\32\4\0\30\32"+
    "\26\0\5\32\6\0\11\32\4\0\4\32\1\u01b7\23\32"+
    "\26\0\5\32\6\0\11\32\4\0\21\32\1\u01b8\6\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\32\1\u01b9\26\32"+
    "\26\0\5\32\6\0\11\32\4\0\2\32\1\u01ba\25\32"+
    "\26\0\5\32\6\0\11\32\4\0\22\32\1\u01bb\5\32"+
    "\26\0\5\32\6\0\11\32\4\0\17\32\1\u01bc\10\32"+
    "\26\0\5\32\6\0\11\32\4\0\13\32\1\u01bd\14\32"+
    "\26\0\5\32\6\0\11\32\4\0\16\32\1\u01be\11\32"+
    "\26\0\5\32\6\0\3\32\1\u01bf\5\32\4\0\30\32"+
    "\26\0\5\32\6\0\3\32\1\u01c0\5\32\4\0\30\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u01c1\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u01c2\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u01c3\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\16\32\1\u01c4\11\32"+
    "\26\0\5\32\6\0\11\32\4\0\22\32\1\u01c5\5\32"+
    "\26\0\5\32\6\0\11\32\4\0\13\32\1\u01c6\14\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\u01c7\27\32\26\0"+
    "\5\32\6\0\11\32\4\0\13\32\1\u01c8\14\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u01c9\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u01ca\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\15\32\1\u01cb\12\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u01cc\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u01cd\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\2\32\1\u01ce\25\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u01cf\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u01d0\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u01d1\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\16\32\1\u01d2\11\32\26\0"+
    "\5\32\6\0\11\32\4\0\4\32\1\u01d3\23\32\26\0"+
    "\5\32\6\0\11\32\4\0\21\32\1\u01d4\6\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u01d5\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u01d6\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u01d7\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\20\32\1\u01d8\7\32\26\0"+
    "\5\32\6\0\11\32\4\0\22\32\1\u01d9\5\32\26\0"+
    "\5\32\6\0\11\32\4\0\22\32\1\u01da\5\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\u01db\27\32\26\0\5\32"+
    "\6\0\11\32\4\0\5\32\1\u01dc\22\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u01dd\27\32\26\0\5\32\6\0"+
    "\11\32\4\0\4\32\1\u01de\23\32\26\0\5\32\6\0"+
    "\11\32\4\0\2\32\1\u01df\25\32\26\0\5\32\6\0"+
    "\11\32\4\0\13\32\1\u01e0\14\32\26\0\5\32\6\0"+
    "\1\u01e1\10\32\4\0\30\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u01e2\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u01e3\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\u01e4\22\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u01e5\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u01e6\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\21\32\1\u01e7\6\32\26\0\5\32\6\0\11\32"+
    "\4\0\14\32\1\u01e8\13\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\u01e9\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\u01ea\27\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u01eb\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\20\32\1\u01ec\7\32\26\0\5\32\6\0\11\32\4\0"+
    "\21\32\1\u01ed\6\32\26\0\5\32\6\0\11\32\4\0"+
    "\22\32\1\u01ee\5\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u01ef\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\u01f0\14\32\26\0\5\32\6\0\11\32\4\0"+
    "\5\32\1\u01f1\22\32\26\0\5\32\6\0\11\32\4\0"+
    "\20\32\1\u01f2\7\32\26\0\5\32\6\0\11\32\4\0"+
    "\15\32\1\u01f3\12\32\26\0\5\32\6\0\11\32\4\0"+
    "\16\32\1\u01f4\11\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\u01f5\27\32\26\0\5\32\6\0\11\32\4\0\22\32"+
    "\1\u01f6\5\32\26\0\5\32\6\0\11\32\4\0\21\32"+
    "\1\u01f7\6\32\26\0\5\32\6\0\11\32\4\0\17\32"+
    "\1\u01f8\10\32\26\0\5\32\6\0\11\32\4\0\2\32"+
    "\1\u01f9\17\32\1\u01fa\2\32\1\u01fb\2\32\26\0\5\32"+
    "\6\0\11\32\4\0\26\32\1\u01fc\1\32\26\0\5\32"+
    "\6\0\11\32\4\0\16\32\1\u01fd\11\32\26\0\5\32"+
    "\6\0\11\32\4\0\21\32\1\u01fe\6\32\26\0\5\32"+
    "\6\0\11\32\4\0\5\32\1\u01ff\22\32\26\0\5\32"+
    "\6\0\11\32\4\0\26\32\1\u0200\1\32\26\0\5\32"+
    "\6\0\11\32\4\0\5\32\1\u0201\22\32\26\0\5\32"+
    "\6\0\11\32\4\0\20\32\1\u0202\7\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\32\1\u0203\26\32\26\0\5\32"+
    "\6\0\11\32\4\0\15\32\1\u0204\12\32\26\0\5\32"+
    "\6\0\11\32\4\0\14\32\1\u0205\13\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u0206\27\32\26\0\5\32\6\0"+
    "\11\32\4\0\27\32\1\u0207\26\0\5\32\6\0\11\32"+
    "\4\0\13\32\1\u0208\14\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u0209\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\10\32\1\u020a\17\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u020b\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\23\32\1\u020c\4\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\u020d\27\32\26\0\5\32\6\0\11\32\4\0"+
    "\26\32\1\u020e\1\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\32\1\u020f\26\32\26\0\5\32\6\0\11\32\4\0"+
    "\13\32\1\u0210\14\32\26\0\5\32\6\0\11\32\4\0"+
    "\1\u0211\27\32\26\0\5\32\6\0\11\32\4\0\11\32"+
    "\1\u0212\16\32\26\0\5\32\6\0\11\32\4\0\14\32"+
    "\1\u0213\13\32\26\0\5\32\6\0\11\32\4\0\1\32"+
    "\1\u0214\26\32\26\0\5\32\6\0\11\32\4\0\1\32"+
    "\1\u0215\26\32\26\0\5\32\6\0\11\32\4\0\11\32"+
    "\1\u0216\16\32\26\0\5\32\6\0\11\32\4\0\23\32"+
    "\1\u0217\4\32\26\0\5\32\6\0\11\32\4\0\7\32"+
    "\1\u0218\20\32\26\0\5\32\6\0\11\32\4\0\1\32"+
    "\1\u0219\1\u021a\4\32\1\u021b\5\32\1\u021c\2\32\1\u021d"+
    "\7\32\26\0\5\32\6\0\11\32\4\0\22\32\1\u021e"+
    "\5\32\26\0\5\32\6\0\11\32\4\0\27\32\1\u021f"+
    "\26\0\5\32\6\0\6\32\1\u0220\2\32\4\0\30\32"+
    "\26\0\5\32\6\0\11\32\4\0\4\32\1\u0221\23\32"+
    "\26\0\5\32\6\0\11\32\4\0\17\32\1\u0222\10\32"+
    "\26\0\5\32\6\0\11\32\4\0\11\32\1\u0223\16\32"+
    "\26\0\5\32\6\0\11\32\4\0\3\32\1\u0224\24\32"+
    "\26\0\5\32\6\0\11\32\4\0\15\32\1\u0225\12\32"+
    "\26\0\5\32\6\0\11\32\4\0\22\32\1\u0226\5\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0227\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\10\32\1\u0228\17\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0229\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\16\32\1\u022a\11\32"+
    "\26\0\5\32\6\0\11\32\4\0\23\32\1\u022b\4\32"+
    "\26\0\5\32\6\0\4\32\1\u022c\4\32\4\0\30\32"+
    "\26\0\5\32\6\0\11\32\4\0\11\32\1\u022d\16\32"+
    "\26\0\5\32\6\0\11\32\4\0\14\32\1\u022e\13\32"+
    "\26\0\5\32\6\0\11\32\4\0\17\32\1\u022f\10\32"+
    "\26\0\5\32\6\0\11\32\4\0\12\32\1\u0230\15\32"+
    "\26\0\5\32\6\0\11\32\4\0\21\32\1\u0231\6\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u0232\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u0233\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\15\32\1\u0234\12\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\32\1\u0235\26\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0236\7\32"+
    "\26\0\5\32\6\0\11\32\4\0\20\32\1\u0237\7\32"+
    "\26\0\5\32\6\0\7\32\1\u0238\1\32\4\0\30\32"+
    "\26\0\5\32\6\0\11\32\4\0\21\32\1\u0239\6\32"+
    "\26\0\5\32\6\0\11\32\4\0\1\32\1\u023a\26\32"+
    "\26\0\5\32\6\0\11\32\4\0\14\32\1\u023b\13\32"+
    "\26\0\5\32\6\0\11\32\4\0\17\32\1\u023c\10\32"+
    "\26\0\5\32\6\0\11\32\4\0\5\32\1\u023d\22\32"+
    "\26\0\5\32\6\0\11\32\4\0\27\32\1\u023e\26\0"+
    "\5\32\6\0\11\32\4\0\14\32\1\u023f\13\32\26\0"+
    "\5\32\6\0\11\32\4\0\5\32\1\u0240\22\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u0241\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\17\32\1\u0242\10\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u0243\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u0244\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\21\32\1\u0245\6\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\32\1\u0246\26\32\26\0"+
    "\5\32\6\0\11\32\4\0\2\32\1\u0247\25\32\26\0"+
    "\5\32\6\0\11\32\4\0\1\u0248\27\32\26\0\5\32"+
    "\6\0\11\32\4\0\17\32\1\u0249\10\32\26\0\5\32"+
    "\6\0\11\32\4\0\20\32\1\u024a\7\32\26\0\5\32"+
    "\6\0\11\32\4\0\21\32\1\u024b\6\32\26\0\5\32"+
    "\6\0\11\32\4\0\13\32\1\u024c\14\32\26\0\5\32"+
    "\6\0\11\32\4\0\13\32\1\u024d\14\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\32\1\u024e\26\32\26\0\5\32"+
    "\6\0\11\32\4\0\1\u024f\27\32\26\0\5\32\6\0"+
    "\11\32\4\0\5\32\1\u0250\22\32\26\0\5\32\6\0"+
    "\11\32\4\0\1\u0251\27\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\u0252\22\32\26\0\5\32\6\0\11\32"+
    "\4\0\15\32\1\u0253\12\32\26\0\5\32\6\0\11\32"+
    "\4\0\1\32\1\u0254\26\32\26\0\5\32\6\0\11\32"+
    "\4\0\15\32\1\u0255\12\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u0256\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\4\32\1\u0257\23\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u0258\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\15\32\1\u0259\12\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u025a\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\u025b\22\32\26\0\5\32\6\0\11\32"+
    "\4\0\21\32\1\u025c\6\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u025d\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\26\32\1\u025e\1\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\u025f\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\21\32\1\u0260\6\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u0261\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u0262\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\u0263\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\23\32\1\u0264\4\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u0265\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\22\32\1\u0266\5\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u0267\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\u0268\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\20\32\1\u0269\7\32\26\0\5\32\6\0\11\32"+
    "\4\0\5\32\1\u026a\22\32\26\0\5\32\6\0\11\32"+
    "\4\0\17\32\1\u026b\10\32\26\0\5\32\6\0\11\32"+
    "\4\0\16\32\1\u026c\11\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u026d\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\17\32\1\u026e\10\32\26\0\5\32\6\0\11\32"+
    "\4\0\3\32\1\u026f\24\32\26\0\5\32\6\0\11\32"+
    "\4\0\11\32\1\u0270\16\32\26\0\5\32\6\0\11\32"+
    "\4\0\3\32\1\u0271\24\32\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[35910];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\3\11\21\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\0\1\11\5\0\7\11\1\1\1\0"+
    "\1\1\1\11\2\0\2\11\1\1\3\11\51\1\1\11"+
    "\5\0\1\1\5\0\1\1\2\11\56\1\5\0\1\1"+
    "\1\0\2\1\4\0\1\11\60\1\1\0\2\1\2\0"+
    "\2\1\3\0\50\1\3\0\4\1\2\0\36\1\4\0"+
    "\1\1\1\0\1\1\1\0\32\1\1\0\1\1\1\0"+
    "\32\1\2\0\344\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GDShaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 150: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 151: break;
          case 3:
            { return GDShaderTypes.OP_NOT;
            }
          // fall through
          case 152: break;
          case 4:
            { return GDShaderTypes.OP_MOD;
            }
          // fall through
          case 153: break;
          case 5:
            { return GDShaderTypes.OP_BIT_AND;
            }
          // fall through
          case 154: break;
          case 6:
            { return GDShaderTypes.PARENTHESIS_OPEN;
            }
          // fall through
          case 155: break;
          case 7:
            { return GDShaderTypes.PARENTHESIS_CLOSE;
            }
          // fall through
          case 156: break;
          case 8:
            { return GDShaderTypes.OP_MUL;
            }
          // fall through
          case 157: break;
          case 9:
            { return GDShaderTypes.OP_ADD;
            }
          // fall through
          case 158: break;
          case 10:
            { return GDShaderTypes.COMMA;
            }
          // fall through
          case 159: break;
          case 11:
            { return GDShaderTypes.OP_SUB;
            }
          // fall through
          case 160: break;
          case 12:
            { return GDShaderTypes.PERIOD;
            }
          // fall through
          case 161: break;
          case 13:
            { return GDShaderTypes.OP_DIV;
            }
          // fall through
          case 162: break;
          case 14:
            { return GDShaderTypes.INT_CONSTANT;
            }
          // fall through
          case 163: break;
          case 15:
            { return GDShaderTypes.COLON;
            }
          // fall through
          case 164: break;
          case 16:
            { return GDShaderTypes.SEMICOLON;
            }
          // fall through
          case 165: break;
          case 17:
            { return GDShaderTypes.OP_LESS;
            }
          // fall through
          case 166: break;
          case 18:
            { return GDShaderTypes.OP_ASSIGN;
            }
          // fall through
          case 167: break;
          case 19:
            { return GDShaderTypes.OP_GREATER;
            }
          // fall through
          case 168: break;
          case 20:
            { return GDShaderTypes.QUESTION;
            }
          // fall through
          case 169: break;
          case 21:
            { return GDShaderTypes.IDENTIFIER;
            }
          // fall through
          case 170: break;
          case 22:
            { return GDShaderTypes.BRACKET_OPEN;
            }
          // fall through
          case 171: break;
          case 23:
            { return GDShaderTypes.BRACKET_CLOSE;
            }
          // fall through
          case 172: break;
          case 24:
            { return GDShaderTypes.OP_BIT_XOR;
            }
          // fall through
          case 173: break;
          case 25:
            { return GDShaderTypes.CURLY_BRACKET_OPEN;
            }
          // fall through
          case 174: break;
          case 26:
            { return GDShaderTypes.OP_BIT_OR;
            }
          // fall through
          case 175: break;
          case 27:
            { return GDShaderTypes.CURLY_BRACKET_CLOSE;
            }
          // fall through
          case 176: break;
          case 28:
            { return GDShaderTypes.OP_BIT_INVERT;
            }
          // fall through
          case 177: break;
          case 29:
            { return GDShaderTypes.OP_NOT_EQUAL;
            }
          // fall through
          case 178: break;
          case 30:
            { return GDShaderTypes.STRING_CONSTANT;
            }
          // fall through
          case 179: break;
          case 31:
            { return GDShaderTypes.OP_ASSIGN_MOD;
            }
          // fall through
          case 180: break;
          case 32:
            { return GDShaderTypes.OP_AND;
            }
          // fall through
          case 181: break;
          case 33:
            { return GDShaderTypes.OP_ASSIGN_MUL;
            }
          // fall through
          case 182: break;
          case 34:
            { return GDShaderTypes.OP_INCREMENT;
            }
          // fall through
          case 183: break;
          case 35:
            { return GDShaderTypes.OP_ASSIGN_ADD;
            }
          // fall through
          case 184: break;
          case 36:
            { return GDShaderTypes.OP_DECREMENT;
            }
          // fall through
          case 185: break;
          case 37:
            { return GDShaderTypes.OP_ASSIGN_SUB;
            }
          // fall through
          case 186: break;
          case 38:
            { return GDShaderTypes.FLOAT_CONSTANT;
            }
          // fall through
          case 187: break;
          case 39:
            { return GDShaderTypes.LINE_COMMENT;
            }
          // fall through
          case 188: break;
          case 40:
            { return GDShaderTypes.OP_ASSIGN_DIV;
            }
          // fall through
          case 189: break;
          case 41:
            { return GDShaderTypes.UINT_CONSTANT;
            }
          // fall through
          case 190: break;
          case 42:
            { return GDShaderTypes.OP_SHIFT_LEFT;
            }
          // fall through
          case 191: break;
          case 43:
            { return GDShaderTypes.OP_LESS_EQUAL;
            }
          // fall through
          case 192: break;
          case 44:
            { return GDShaderTypes.OP_EQUAL;
            }
          // fall through
          case 193: break;
          case 45:
            { return GDShaderTypes.OP_GREATER_EQUAL;
            }
          // fall through
          case 194: break;
          case 46:
            { return GDShaderTypes.OP_SHIFT_RIGHT;
            }
          // fall through
          case 195: break;
          case 47:
            { return GDShaderTypes.CF_DO;
            }
          // fall through
          case 196: break;
          case 48:
            { return GDShaderTypes.CF_IF;
            }
          // fall through
          case 197: break;
          case 49:
            { return GDShaderTypes.ARG_IN;
            }
          // fall through
          case 198: break;
          case 50:
            { return GDShaderTypes.OP_OR;
            }
          // fall through
          case 199: break;
          case 51:
            { return GDShaderTypes.PP_IF_LINE;
            }
          // fall through
          case 200: break;
          case 52:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_LEFT;
            }
          // fall through
          case 201: break;
          case 53:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_RIGHT;
            }
          // fall through
          case 202: break;
          case 54:
            { return GDShaderTypes.CF_FOR;
            }
          // fall through
          case 203: break;
          case 55:
            { return GDShaderTypes.TYPE_INT;
            }
          // fall through
          case 204: break;
          case 56:
            { return GDShaderTypes.ARG_OUT;
            }
          // fall through
          case 205: break;
          case 57:
            { return GDShaderTypes.BLOCK_COMMENT;
            }
          // fall through
          case 206: break;
          case 58:
            { return GDShaderTypes.TYPE_BOOL;
            }
          // fall through
          case 207: break;
          case 59:
            { return GDShaderTypes.CF_CASE;
            }
          // fall through
          case 208: break;
          case 60:
            { return GDShaderTypes.CF_ELSE;
            }
          // fall through
          case 209: break;
          case 61:
            { return GDShaderTypes.INTERPOLATION_FLAT;
            }
          // fall through
          case 210: break;
          case 62:
            { return GDShaderTypes.PRECISION_LOW;
            }
          // fall through
          case 211: break;
          case 63:
            { return GDShaderTypes.TYPE_MAT2;
            }
          // fall through
          case 212: break;
          case 64:
            { return GDShaderTypes.TYPE_MAT3;
            }
          // fall through
          case 213: break;
          case 65:
            { return GDShaderTypes.TYPE_MAT4;
            }
          // fall through
          case 214: break;
          case 66:
            { return GDShaderTypes.TRUE;
            }
          // fall through
          case 215: break;
          case 67:
            { return GDShaderTypes.TYPE_UINT;
            }
          // fall through
          case 216: break;
          case 68:
            { return GDShaderTypes.TYPE_VEC2;
            }
          // fall through
          case 217: break;
          case 69:
            { return GDShaderTypes.TYPE_VEC3;
            }
          // fall through
          case 218: break;
          case 70:
            { return GDShaderTypes.TYPE_VEC4;
            }
          // fall through
          case 219: break;
          case 71:
            { return GDShaderTypes.TYPE_VOID;
            }
          // fall through
          case 220: break;
          case 72:
            { return GDShaderTypes.PP_ELIF_LINE;
            }
          // fall through
          case 221: break;
          case 73:
            { return GDShaderTypes.PP_ELSE_LINE;
            }
          // fall through
          case 222: break;
          case 74:
            { return GDShaderTypes.CF_BREAK;
            }
          // fall through
          case 223: break;
          case 75:
            { return GDShaderTypes.TYPE_BVEC2;
            }
          // fall through
          case 224: break;
          case 76:
            { return GDShaderTypes.TYPE_BVEC3;
            }
          // fall through
          case 225: break;
          case 77:
            { return GDShaderTypes.TYPE_BVEC4;
            }
          // fall through
          case 226: break;
          case 78:
            { return GDShaderTypes.CONST;
            }
          // fall through
          case 227: break;
          case 79:
            { return GDShaderTypes.FALSE;
            }
          // fall through
          case 228: break;
          case 80:
            { return GDShaderTypes.TYPE_FLOAT;
            }
          // fall through
          case 229: break;
          case 81:
            { return GDShaderTypes.PRECISION_HIGH;
            }
          // fall through
          case 230: break;
          case 82:
            { return GDShaderTypes.ARG_INOUT;
            }
          // fall through
          case 231: break;
          case 83:
            { return GDShaderTypes.TYPE_IVEC2;
            }
          // fall through
          case 232: break;
          case 84:
            { return GDShaderTypes.TYPE_IVEC3;
            }
          // fall through
          case 233: break;
          case 85:
            { return GDShaderTypes.TYPE_IVEC4;
            }
          // fall through
          case 234: break;
          case 86:
            { return GDShaderTypes.TYPE_UVEC2;
            }
          // fall through
          case 235: break;
          case 87:
            { return GDShaderTypes.TYPE_UVEC3;
            }
          // fall through
          case 236: break;
          case 88:
            { return GDShaderTypes.TYPE_UVEC4;
            }
          // fall through
          case 237: break;
          case 89:
            { return GDShaderTypes.CF_WHILE;
            }
          // fall through
          case 238: break;
          case 90:
            { return GDShaderTypes.PP_ENDIF_LINE;
            }
          // fall through
          case 239: break;
          case 91:
            { return GDShaderTypes.PP_ERROR_LINE;
            }
          // fall through
          case 240: break;
          case 92:
            { return GDShaderTypes.PP_IFDEF_LINE;
            }
          // fall through
          case 241: break;
          case 93:
            { return GDShaderTypes.PP_UNDEF_LINE;
            }
          // fall through
          case 242: break;
          case 94:
            { return GDShaderTypes.GLOBAL;
            }
          // fall through
          case 243: break;
          case 95:
            { return GDShaderTypes.CF_RETURN;
            }
          // fall through
          case 244: break;
          case 96:
            { return GDShaderTypes.INTERPOLATION_SMOOTH;
            }
          // fall through
          case 245: break;
          case 97:
            { return GDShaderTypes.STRUCT;
            }
          // fall through
          case 246: break;
          case 98:
            { return GDShaderTypes.CF_SWITCH;
            }
          // fall through
          case 247: break;
          case 99:
            { return GDShaderTypes.PP_IFNDEF_LINE;
            }
          // fall through
          case 248: break;
          case 100:
            { return GDShaderTypes.PP_PRAGMA_LINE;
            }
          // fall through
          case 249: break;
          case 101:
            { return GDShaderTypes.CF_DEFAULT;
            }
          // fall through
          case 250: break;
          case 102:
            { return GDShaderTypes.CF_DISCARD;
            }
          // fall through
          case 251: break;
          case 103:
            { return GDShaderTypes.PRECISION_MEDIUM;
            }
          // fall through
          case 252: break;
          case 104:
            { return GDShaderTypes.UNIFORM;
            }
          // fall through
          case 253: break;
          case 105:
            { return GDShaderTypes.VARYING;
            }
          // fall through
          case 254: break;
          case 106:
            { return GDShaderTypes.PP_DEFINE_LINE;
            }
          // fall through
          case 255: break;
          case 107:
            { return GDShaderTypes.PP_INCLUDE_LINE;
            }
          // fall through
          case 256: break;
          case 108:
            { return GDShaderTypes.CF_CONTINUE;
            }
          // fall through
          case 257: break;
          case 109:
            { return GDShaderTypes.INSTANCE;
            }
          // fall through
          case 258: break;
          case 110:
            { return GDShaderTypes.HINT_ENUM;
            }
          // fall through
          case 259: break;
          case 111:
            { return GDShaderTypes.TYPE_SAMPLER2D;
            }
          // fall through
          case 260: break;
          case 112:
            { return GDShaderTypes.TYPE_SAMPLER3D;
            }
          // fall through
          case 261: break;
          case 113:
            { return GDShaderTypes.HINT_RANGE;
            }
          // fall through
          case 262: break;
          case 114:
            { return GDShaderTypes.TYPE_ISAMPLER2D;
            }
          // fall through
          case 263: break;
          case 115:
            { return GDShaderTypes.TYPE_ISAMPLER3D;
            }
          // fall through
          case 264: break;
          case 116:
            { return GDShaderTypes.TYPE_USAMPLER2D;
            }
          // fall through
          case 265: break;
          case 117:
            { return GDShaderTypes.TYPE_USAMPLER3D;
            }
          // fall through
          case 266: break;
          case 118:
            { return GDShaderTypes.HINT_NORMAL_TEXTURE;
            }
          // fall through
          case 267: break;
          case 119:
            { return GDShaderTypes.RENDER_MODE;
            }
          // fall through
          case 268: break;
          case 120:
            { return GDShaderTypes.TYPE_SAMPLERCUBE;
            }
          // fall through
          case 269: break;
          case 121:
            { return GDShaderTypes.SHADER_TYPE;
            }
          // fall through
          case 270: break;
          case 122:
            { return GDShaderTypes.HINT_SOURCE_COLOR;
            }
          // fall through
          case 271: break;
          case 123:
            { return GDShaderTypes.STENCIL_MODE;
            }
          // fall through
          case 272: break;
          case 124:
            { return GDShaderTypes.FILTER_LINEAR;
            }
          // fall through
          case 273: break;
          case 125:
            { return GDShaderTypes.REPEAT_ENABLE;
            }
          // fall through
          case 274: break;
          case 126:
            { return GDShaderTypes.FILTER_NEAREST;
            }
          // fall through
          case 275: break;
          case 127:
            { return GDShaderTypes.UNIFORM_GROUP;
            }
          // fall through
          case 276: break;
          case 128:
            { return GDShaderTypes.HINT_INSTANCE_INDEX;
            }
          // fall through
          case 277: break;
          case 129:
            { return GDShaderTypes.REPEAT_DISABLE;
            }
          // fall through
          case 278: break;
          case 130:
            { return GDShaderTypes.HINT_ANISOTROPY_TEXTURE;
            }
          // fall through
          case 279: break;
          case 131:
            { return GDShaderTypes.HINT_ROUGHNESS_A;
            }
          // fall through
          case 280: break;
          case 132:
            { return GDShaderTypes.HINT_ROUGHNESS_B;
            }
          // fall through
          case 281: break;
          case 133:
            { return GDShaderTypes.HINT_ROUGHNESS_G;
            }
          // fall through
          case 282: break;
          case 134:
            { return GDShaderTypes.HINT_ROUGHNESS_R;
            }
          // fall through
          case 283: break;
          case 135:
            { return GDShaderTypes.TYPE_SAMPLERCUBEARRAY;
            }
          // fall through
          case 284: break;
          case 136:
            { return GDShaderTypes.HINT_DEFAULT_BLACK_TEXTURE;
            }
          // fall through
          case 285: break;
          case 137:
            { return GDShaderTypes.HINT_DEFAULT_WHITE_TEXTURE;
            }
          // fall through
          case 286: break;
          case 138:
            { return GDShaderTypes.HINT_DEPTH_TEXTURE;
            }
          // fall through
          case 287: break;
          case 139:
            { return GDShaderTypes.TYPE_SAMPLEREXT;
            }
          // fall through
          case 288: break;
          case 140:
            { return GDShaderTypes.HINT_ROUGHNESS_GRAY;
            }
          // fall through
          case 289: break;
          case 141:
            { return GDShaderTypes.HINT_SCREEN_TEXTURE;
            }
          // fall through
          case 290: break;
          case 142:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP;
            }
          // fall through
          case 291: break;
          case 143:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP;
            }
          // fall through
          case 292: break;
          case 144:
            { return GDShaderTypes.HINT_ROUGHNESS_NORMAL_TEXTURE;
            }
          // fall through
          case 293: break;
          case 145:
            { return GDShaderTypes.HINT_COLOR_CONVERSION_DISABLED;
            }
          // fall through
          case 294: break;
          case 146:
            { return GDShaderTypes.HINT_DEFAULT_TRANSPARENT_TEXTURE;
            }
          // fall through
          case 295: break;
          case 147:
            { return GDShaderTypes.HINT_NORMAL_ROUGHNESS_TEXTURE;
            }
          // fall through
          case 296: break;
          case 148:
            { return GDShaderTypes.FILTER_LINEAR_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 297: break;
          case 149:
            { return GDShaderTypes.FILTER_NEAREST_MIPMAP_ANISOTROPIC;
            }
          // fall through
          case 298: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
