// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GDShader.flex

package kr.jaehoyi.gdshader.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kr.jaehoyi.gdshader.psi.GDShaderTypes;
import com.intellij.psi.TokenType;


public class GDShaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\0\1\3\22\0\1\2"+
    "\1\4\3\0\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\0\1\17\1\20"+
    "\1\21\5\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\0\1\31\1\32\1\33\11\0\1\34"+
    "\3\0\1\35\7\0\1\36\1\0\1\37\1\40\1\41"+
    "\1\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\0\1\71\1\72\1\73\1\74\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\21\0\1\26"+
    "\1\27\1\30\1\31\2\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\7\0\1\51\7\0\1\52"+
    "\1\53\24\0\1\54\3\0\1\55\1\56\12\0\1\57"+
    "\5\0\1\60\5\0\1\61\23\0\1\62\1\63\2\0"+
    "\1\64\4\0\1\65\11\0\1\66\1\67\1\70\1\71"+
    "\10\0\1\72\1\73\4\0\1\74\1\75\1\76\1\77"+
    "\3\0\1\100\1\101\1\102\1\103\1\104\3\0\1\105"+
    "\1\106\2\0\1\107\1\110\2\0\1\111\1\112\1\113"+
    "\12\0\1\114\1\115\1\116\1\0\1\117\1\120\4\0"+
    "\1\121\5\0\1\122\3\0\1\123\1\124\4\0\1\125"+
    "\1\126\3\0\1\127\4\0\1\130\1\0\1\131\1\132"+
    "\1\0\1\133\15\0\1\134\1\135\7\0\1\136\1\137"+
    "\5\0\1\140\1\141\1\0\1\142\1\143\1\0\1\144"+
    "\4\0\1\145\3\0\1\146\4\0\1\147\2\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u016e"+
    "\0\u01ab\0\u01e8\0\u016e\0\u0225\0\u016e\0\u0262\0\u016e\0\u016e"+
    "\0\u029f\0\u02dc\0\u0319\0\u016e\0\u016e\0\u016e\0\u016e\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u016e\0\u0763\0\u016e\0\u016e\0\u07a0\0\u07dd\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u081a\0\u0857"+
    "\0\u016e\0\u0894\0\u016e\0\u016e\0\u016e\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u016e\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u016e\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u016e\0\u1165\0\u11a2\0\u11df\0\u016e"+
    "\0\u016e\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u016e\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u016e\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u016e"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u016e\0\u016e\0\u1b67\0\u1ba4\0\u016e"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u016e\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u016e\0\u016e\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u21d6\0\u2213\0\u2250\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u228d\0\u22ca\0\u2307\0\u016e"+
    "\0\u016e\0\u2344\0\u2381\0\u016e\0\u016e\0\u23be\0\u23fb\0\u016e"+
    "\0\u016e\0\u016e\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u016e\0\u016e\0\u016e\0\u269a"+
    "\0\u016e\0\u016e\0\u26d7\0\u2714\0\u2751\0\u278e\0\u016e\0\u27cb"+
    "\0\u2808\0\u2845\0\u2882\0\u28bf\0\u016e\0\u28fc\0\u2939\0\u2976"+
    "\0\u016e\0\u016e\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u016e\0\u016e"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u016e\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u016e\0\u2c52\0\u016e\0\u016e\0\u2c8f\0\u016e\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u016e\0\u016e\0\u2fe5\0\u3022\0\u305f"+
    "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u016e\0\u016e\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u016e\0\u016e\0\u32c1\0\u016e\0\u32fe"+
    "\0\u333b\0\u016e\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u016e\0\u346c"+
    "\0\u34a9\0\u34e6\0\u016e\0\u3523\0\u3560\0\u359d\0\u35da\0\u016e"+
    "\0\u3617\0\u3654\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\3\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\6\0\1\25\1\26"+
    "\1\27\2\0\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\1\41\1\0\1\42\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\0\1\51"+
    "\1\52\1\53\1\54\47\0\1\55\12\0\1\56\14\0"+
    "\2\3\116\0\1\57\74\0\1\60\55\0\1\61\210\0"+
    "\1\62\61\0\1\63\12\0\1\64\63\0\1\65\10\0"+
    "\1\66\60\0\1\67\4\0\1\70\6\0\1\71\73\0"+
    "\1\72\1\73\74\0\1\74\74\0\1\75\1\76\125\0"+
    "\1\77\1\0\1\100\3\0\1\101\51\0\1\102\14\0"+
    "\1\103\63\0\1\104\3\0\1\105\4\0\1\106\71\0"+
    "\1\107\62\0\1\110\11\0\1\111\2\0\1\112\71\0"+
    "\1\113\4\0\1\114\65\0\1\115\71\0\1\116\6\0"+
    "\1\117\3\0\1\120\2\0\1\121\66\0\1\122\57\0"+
    "\1\123\3\0\1\124\112\0\1\125\56\0\1\126\70\0"+
    "\1\127\6\0\1\130\11\0\1\131\2\0\1\132\67\0"+
    "\1\133\65\0\1\134\3\0\1\135\3\0\1\136\2\0"+
    "\1\137\51\0\1\140\3\0\1\141\10\0\1\142\66\0"+
    "\1\143\115\0\1\144\56\0\1\145\75\0\1\146\17\0"+
    "\11\67\1\147\63\67\3\70\1\0\71\70\25\0\1\150"+
    "\74\0\1\151\126\0\1\152\63\0\1\153\74\0\1\154"+
    "\110\0\1\155\70\0\1\156\65\0\1\157\107\0\1\160"+
    "\74\0\1\161\66\0\1\162\77\0\1\163\76\0\1\164"+
    "\72\0\1\165\74\0\1\166\65\0\1\167\103\0\1\170"+
    "\2\0\1\171\1\172\53\0\1\173\100\0\1\174\114\0"+
    "\1\175\71\0\1\176\56\0\1\177\112\0\1\200\67\0"+
    "\1\201\4\0\1\202\66\0\1\203\61\0\1\204\100\0"+
    "\1\205\12\0\1\206\65\0\1\207\106\0\1\210\66\0"+
    "\1\211\70\0\1\212\64\0\1\213\100\0\1\214\107\0"+
    "\1\215\57\0\1\216\102\0\1\217\74\0\1\220\64\0"+
    "\1\221\111\0\1\222\15\0\11\67\1\223\4\67\1\224"+
    "\56\67\54\0\1\225\62\0\1\226\76\0\1\227\76\0"+
    "\1\230\110\0\1\231\1\232\53\0\1\233\76\0\1\234"+
    "\76\0\1\235\110\0\1\236\54\0\1\237\75\0\1\240"+
    "\115\0\1\241\61\0\1\242\107\0\1\243\73\0\1\244"+
    "\66\0\1\245\63\0\1\246\110\0\1\247\33\0\1\250"+
    "\1\251\1\252\125\0\1\253\67\0\1\254\113\0\1\255"+
    "\70\0\1\256\61\0\1\257\105\0\1\260\102\0\1\261"+
    "\73\0\1\262\57\0\1\263\111\0\1\264\60\0\1\265"+
    "\102\0\1\266\63\0\1\267\120\0\1\270\23\0\1\271"+
    "\1\272\1\273\120\0\1\274\103\0\1\275\103\0\1\276"+
    "\70\0\1\277\15\0\11\67\1\223\4\67\1\0\56\67"+
    "\53\0\1\300\40\0\1\301\1\302\1\303\136\0\1\304"+
    "\63\0\1\305\106\0\1\306\52\0\1\307\100\0\1\310"+
    "\111\0\1\311\53\0\1\312\112\0\1\313\74\0\1\314"+
    "\77\0\1\315\53\0\1\316\112\0\1\317\33\0\1\320"+
    "\1\321\1\322\137\0\1\323\56\0\1\324\107\0\1\325"+
    "\67\0\1\326\66\0\1\327\72\0\1\330\74\0\1\331"+
    "\74\0\1\332\107\0\1\333\75\0\1\334\33\0\1\335"+
    "\1\336\1\337\125\0\1\340\70\0\1\341\27\0\1\342"+
    "\156\0\1\343\67\0\1\344\72\0\1\345\101\0\1\346"+
    "\67\0\1\347\61\0\1\350\111\0\1\351\72\0\1\352"+
    "\75\0\1\353\100\0\1\354\71\0\1\355\64\0\1\356"+
    "\107\0\1\357\65\0\1\360\105\0\1\361\62\0\1\362"+
    "\104\0\1\363\67\0\1\364\76\0\1\365\67\0\1\276"+
    "\107\0\1\366\73\0\1\367\56\0\1\370\113\0\1\371"+
    "\54\0\1\372\76\0\1\373\106\0\1\374\55\0\1\375"+
    "\114\0\1\376\54\0\1\377\107\0\1\u0100\75\0\1\u0101"+
    "\65\0\1\u0102\76\0\1\u0103\72\0\1\u0104\104\0\1\u0105"+
    "\64\0\1\u0106\107\0\1\u0107\70\0\1\u0108\36\0\1\u0109"+
    "\1\u010a\10\0\1\u010b\1\0\1\u010c\124\0\1\u010d\52\0"+
    "\1\u010e\114\0\1\u010f\65\0\1\u0110\41\0\1\u0111\1\u0112"+
    "\133\0\1\u0113\47\0\1\u0114\74\0\1\u0115\126\0\1\u0116"+
    "\77\0\1\u0117\75\0\1\u0118\61\0\1\u0119\36\0\1\u011a"+
    "\1\u011b\123\0\1\u011c\57\0\1\u011d\74\0\1\u011e\107\0"+
    "\1\u011f\72\0\1\u0120\114\0\1\u0121\71\0\1\u0122\73\0"+
    "\1\u0123\47\0\1\u0124\74\0\1\u0125\121\0\1\u0126\63\0"+
    "\1\u0127\74\0\1\u0128\74\0\1\u0129\74\0\1\u012a\73\0"+
    "\1\u012b\110\0\1\u012c\43\0\1\u012d\125\0\1\u012e\61\0"+
    "\1\u012f\103\0\1\u0130\100\0\1\u0131\71\0\1\u0132\100\0"+
    "\1\u0133\73\0\1\u0134\55\0\1\u0135\74\0\1\u0136\106\0"+
    "\1\u0137\110\0\1\u0138\40\0\1\u0139\73\0\1\u013a\76\0"+
    "\1\u013b\37\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13969];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\11\2\1\1\11\1\1\1\11\1\1"+
    "\2\11\3\1\4\11\21\0\1\11\1\1\2\11\2\0"+
    "\10\11\1\0\1\1\1\11\1\1\3\11\1\1\7\0"+
    "\1\11\7\0\1\11\1\1\24\0\1\11\3\0\2\11"+
    "\12\0\1\11\5\0\1\11\5\0\1\11\23\0\2\11"+
    "\2\0\1\11\4\0\1\11\11\0\4\11\10\0\2\11"+
    "\4\0\4\11\3\0\5\11\3\0\2\11\2\0\2\11"+
    "\2\0\3\11\12\0\3\11\1\0\2\11\4\0\1\11"+
    "\5\0\1\11\3\0\2\11\4\0\2\11\3\0\1\11"+
    "\4\0\1\11\1\0\2\11\1\0\1\11\15\0\2\11"+
    "\7\0\2\11\5\0\2\11\1\0\1\11\1\1\1\0"+
    "\1\11\4\0\1\11\3\0\1\11\4\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GDShaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 105: break;
          case 2:
            { return GDShaderTypes.OP_NOT;
            }
          // fall through
          case 106: break;
          case 3:
            { return GDShaderTypes.OP_MOD;
            }
          // fall through
          case 107: break;
          case 4:
            { return GDShaderTypes.OP_BIT_AND;
            }
          // fall through
          case 108: break;
          case 5:
            { return GDShaderTypes.PARENTHESIS_OPEN;
            }
          // fall through
          case 109: break;
          case 6:
            { return GDShaderTypes.PARENTHESIS_CLOSE;
            }
          // fall through
          case 110: break;
          case 7:
            { return GDShaderTypes.OP_MUL;
            }
          // fall through
          case 111: break;
          case 8:
            { return GDShaderTypes.OP_ADD;
            }
          // fall through
          case 112: break;
          case 9:
            { return GDShaderTypes.COMMA;
            }
          // fall through
          case 113: break;
          case 10:
            { return GDShaderTypes.OP_SUB;
            }
          // fall through
          case 114: break;
          case 11:
            { return GDShaderTypes.PERIOD;
            }
          // fall through
          case 115: break;
          case 12:
            { return GDShaderTypes.OP_DIV;
            }
          // fall through
          case 116: break;
          case 13:
            { return GDShaderTypes.COLON;
            }
          // fall through
          case 117: break;
          case 14:
            { return GDShaderTypes.SEMICOLON;
            }
          // fall through
          case 118: break;
          case 15:
            { return GDShaderTypes.OP_LESS;
            }
          // fall through
          case 119: break;
          case 16:
            { return GDShaderTypes.OP_ASSIGN;
            }
          // fall through
          case 120: break;
          case 17:
            { return GDShaderTypes.OP_GREATER;
            }
          // fall through
          case 121: break;
          case 18:
            { return GDShaderTypes.QUESTION;
            }
          // fall through
          case 122: break;
          case 19:
            { return GDShaderTypes.BRACKET_OPEN;
            }
          // fall through
          case 123: break;
          case 20:
            { return GDShaderTypes.BRACKET_CLOSE;
            }
          // fall through
          case 124: break;
          case 21:
            { return GDShaderTypes.OP_BIT_XOR;
            }
          // fall through
          case 125: break;
          case 22:
            { return GDShaderTypes.CURLY_BRACKET_OPEN;
            }
          // fall through
          case 126: break;
          case 23:
            { return GDShaderTypes.OP_BIT_OR;
            }
          // fall through
          case 127: break;
          case 24:
            { return GDShaderTypes.CURLY_BRACKET_CLOSE;
            }
          // fall through
          case 128: break;
          case 25:
            { return GDShaderTypes.OP_BIT_INVERT;
            }
          // fall through
          case 129: break;
          case 26:
            { return GDShaderTypes.OP_NOT_EQUAL;
            }
          // fall through
          case 130: break;
          case 27:
            { return GDShaderTypes.OP_ASSIGN_MOD;
            }
          // fall through
          case 131: break;
          case 28:
            { return GDShaderTypes.OP_AND;
            }
          // fall through
          case 132: break;
          case 29:
            { return GDShaderTypes.OP_ASSIGN_MUL;
            }
          // fall through
          case 133: break;
          case 30:
            { return GDShaderTypes.OP_INCREMENT;
            }
          // fall through
          case 134: break;
          case 31:
            { return GDShaderTypes.OP_ASSIGN_ADD;
            }
          // fall through
          case 135: break;
          case 32:
            { return GDShaderTypes.OP_DECREMENT;
            }
          // fall through
          case 136: break;
          case 33:
            { return GDShaderTypes.OP_ASSIGN_SUB;
            }
          // fall through
          case 137: break;
          case 34:
            { return GDShaderTypes.LINE_COMMENT;
            }
          // fall through
          case 138: break;
          case 35:
            { return GDShaderTypes.OP_ASSIGN_DIV;
            }
          // fall through
          case 139: break;
          case 36:
            { return GDShaderTypes.OP_SHIFT_LEFT;
            }
          // fall through
          case 140: break;
          case 37:
            { return GDShaderTypes.OP_LESS_EQUAL;
            }
          // fall through
          case 141: break;
          case 38:
            { return GDShaderTypes.OP_EQUAL;
            }
          // fall through
          case 142: break;
          case 39:
            { return GDShaderTypes.OP_GREATER_EQUAL;
            }
          // fall through
          case 143: break;
          case 40:
            { return GDShaderTypes.OP_SHIFT_RIGHT;
            }
          // fall through
          case 144: break;
          case 41:
            { return GDShaderTypes.CF_DO;
            }
          // fall through
          case 145: break;
          case 42:
            { return GDShaderTypes.CF_IF;
            }
          // fall through
          case 146: break;
          case 43:
            { return GDShaderTypes.ARG_IN;
            }
          // fall through
          case 147: break;
          case 44:
            { return GDShaderTypes.OP_OR;
            }
          // fall through
          case 148: break;
          case 45:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_LEFT;
            }
          // fall through
          case 149: break;
          case 46:
            { return GDShaderTypes.OP_ASSIGN_SHIFT_RIGHT;
            }
          // fall through
          case 150: break;
          case 47:
            { return GDShaderTypes.CF_FOR;
            }
          // fall through
          case 151: break;
          case 48:
            { return GDShaderTypes.TYPE_INT;
            }
          // fall through
          case 152: break;
          case 49:
            { return GDShaderTypes.ARG_OUT;
            }
          // fall through
          case 153: break;
          case 50:
            { return GDShaderTypes.BLOCK_COMMENT;
            }
          // fall through
          case 154: break;
          case 51:
            { return GDShaderTypes.TYPE_BOOL;
            }
          // fall through
          case 155: break;
          case 52:
            { return GDShaderTypes.CF_CASE;
            }
          // fall through
          case 156: break;
          case 53:
            { return GDShaderTypes.CF_ELSE;
            }
          // fall through
          case 157: break;
          case 54:
            { return GDShaderTypes.PRECISION_LOW;
            }
          // fall through
          case 158: break;
          case 55:
            { return GDShaderTypes.TYPE_MAT2;
            }
          // fall through
          case 159: break;
          case 56:
            { return GDShaderTypes.TYPE_MAT3;
            }
          // fall through
          case 160: break;
          case 57:
            { return GDShaderTypes.TYPE_MAT4;
            }
          // fall through
          case 161: break;
          case 58:
            { return GDShaderTypes.TRUE;
            }
          // fall through
          case 162: break;
          case 59:
            { return GDShaderTypes.TYPE_UINT;
            }
          // fall through
          case 163: break;
          case 60:
            { return GDShaderTypes.TYPE_VEC2;
            }
          // fall through
          case 164: break;
          case 61:
            { return GDShaderTypes.TYPE_VEC3;
            }
          // fall through
          case 165: break;
          case 62:
            { return GDShaderTypes.TYPE_VEC4;
            }
          // fall through
          case 166: break;
          case 63:
            { return GDShaderTypes.TYPE_VOID;
            }
          // fall through
          case 167: break;
          case 64:
            { return GDShaderTypes.CF_BREAK;
            }
          // fall through
          case 168: break;
          case 65:
            { return GDShaderTypes.TYPE_BVEC2;
            }
          // fall through
          case 169: break;
          case 66:
            { return GDShaderTypes.TYPE_BVEC3;
            }
          // fall through
          case 170: break;
          case 67:
            { return GDShaderTypes.TYPE_BVEC4;
            }
          // fall through
          case 171: break;
          case 68:
            { return GDShaderTypes.CONST;
            }
          // fall through
          case 172: break;
          case 69:
            { return GDShaderTypes.FALSE;
            }
          // fall through
          case 173: break;
          case 70:
            { return GDShaderTypes.TYPE_FLOAT;
            }
          // fall through
          case 174: break;
          case 71:
            { return GDShaderTypes.PRECISION_HIGH;
            }
          // fall through
          case 175: break;
          case 72:
            { return GDShaderTypes.ARG_INOUT;
            }
          // fall through
          case 176: break;
          case 73:
            { return GDShaderTypes.TYPE_IVEC2;
            }
          // fall through
          case 177: break;
          case 74:
            { return GDShaderTypes.TYPE_IVEC3;
            }
          // fall through
          case 178: break;
          case 75:
            { return GDShaderTypes.TYPE_IVEC4;
            }
          // fall through
          case 179: break;
          case 76:
            { return GDShaderTypes.TYPE_UVEC2;
            }
          // fall through
          case 180: break;
          case 77:
            { return GDShaderTypes.TYPE_UVEC3;
            }
          // fall through
          case 181: break;
          case 78:
            { return GDShaderTypes.TYPE_UVEC4;
            }
          // fall through
          case 182: break;
          case 79:
            { return GDShaderTypes.CF_WHILE;
            }
          // fall through
          case 183: break;
          case 80:
            { return GDShaderTypes.KEYWORD;
            }
          // fall through
          case 184: break;
          case 81:
            { return GDShaderTypes.GLOBAL;
            }
          // fall through
          case 185: break;
          case 82:
            { return GDShaderTypes.CF_RETURN;
            }
          // fall through
          case 186: break;
          case 83:
            { return GDShaderTypes.STRUCT;
            }
          // fall through
          case 187: break;
          case 84:
            { return GDShaderTypes.CF_SWITCH;
            }
          // fall through
          case 188: break;
          case 85:
            { return GDShaderTypes.CF_DEFAULT;
            }
          // fall through
          case 189: break;
          case 86:
            { return GDShaderTypes.CF_DISCARD;
            }
          // fall through
          case 190: break;
          case 87:
            { return GDShaderTypes.PRECISION_MEDIUM;
            }
          // fall through
          case 191: break;
          case 88:
            { return GDShaderTypes.UNIFORM;
            }
          // fall through
          case 192: break;
          case 89:
            { return GDShaderTypes.VARYING;
            }
          // fall through
          case 193: break;
          case 90:
            { return GDShaderTypes.CF_CONTINUE;
            }
          // fall through
          case 194: break;
          case 91:
            { return GDShaderTypes.INSTANCE;
            }
          // fall through
          case 195: break;
          case 92:
            { return GDShaderTypes.TYPE_SAMPLER2D;
            }
          // fall through
          case 196: break;
          case 93:
            { return GDShaderTypes.TYPE_SAMPLER3D;
            }
          // fall through
          case 197: break;
          case 94:
            { return GDShaderTypes.TYPE_ISAMPLER2D;
            }
          // fall through
          case 198: break;
          case 95:
            { return GDShaderTypes.TYPE_ISAMPLER3D;
            }
          // fall through
          case 199: break;
          case 96:
            { return GDShaderTypes.TYPE_USAMPLER2D;
            }
          // fall through
          case 200: break;
          case 97:
            { return GDShaderTypes.TYPE_USAMPLER3D;
            }
          // fall through
          case 201: break;
          case 98:
            { return GDShaderTypes.RENDER_MODE;
            }
          // fall through
          case 202: break;
          case 99:
            { return GDShaderTypes.TYPE_SAMPLERCUBE;
            }
          // fall through
          case 203: break;
          case 100:
            { return GDShaderTypes.SHADER_TYPE;
            }
          // fall through
          case 204: break;
          case 101:
            { return GDShaderTypes.STENCIL_MODE;
            }
          // fall through
          case 205: break;
          case 102:
            { return GDShaderTypes.UNIFORM_GROUP;
            }
          // fall through
          case 206: break;
          case 103:
            { return GDShaderTypes.TYPE_SAMPLERCUBEARRAY;
            }
          // fall through
          case 207: break;
          case 104:
            { return GDShaderTypes.TYPE_SAMPLEREXT;
            }
          // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
