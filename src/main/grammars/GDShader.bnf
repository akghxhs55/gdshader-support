{
  parserClass="kr.jaehoyi.gdshader.parser.GDShaderParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="GDShader"
  psiImplClassSuffix="Impl"
  psiPackage="kr.jaehoyi.gdshader.psi"
  psiImplPackage="kr.jaehoyi.gdshader.psi.impl"

  elementTypeHolderClass="kr.jaehoyi.gdshader.psi.GDShaderTypes"
  elementTypeClass="kr.jaehoyi.gdshader.psi.GDShaderElementType"
  tokenTypeClass="kr.jaehoyi.gdshader.psi.GDShaderTokenType"
  
  psiImplUtilClass="kr.jaehoyi.gdshader.psi.impl.GDShaderPsiImplUtil"
}

GDShaderFile ::= item*

item ::= top_level_declaration
	   | SEMICOLON
	   | LINE_COMMENT
	   | BLOCK_COMMENT
	   | preprocessor_directive
	   
// Top Level Declarations
top_level_declaration ::= shader_type_declaration
		    		    | render_mode_declaration
		    		    | stencil_mode_declaration
		    		    | uniform_group_declaration
		    		    | uniform_variable_declaration
		    		    | const_variable_declaration
		    		    | varying_variable_declaration
		    		    | function_declaration
		    		    | struct_declaration

// Shader, Render Mode, Stencil Mode, Uniform Group Declarations
shader_type_declaration ::= SHADER_TYPE shader_type_name SEMICOLON {
	methods = [ getShaderType ]
}
shader_type_name ::= IDENTIFIER
render_mode_declaration ::= RENDER_MODE IDENTIFIER (COMMA IDENTIFIER)* SEMICOLON
stencil_mode_declaration ::= STENCIL_MODE IDENTIFIER SEMICOLON

uniform_group_declaration ::= UNIFORM_GROUP IDENTIFIER? (PERIOD IDENTIFIER)* SEMICOLON

// Variable Declarations
uniform_variable_declaration ::= (GLOBAL | INSTANCE)? UNIFORM precision? type variable_name (COLON hints)? (OP_ASSIGN expression)? SEMICOLON

const_variable_declaration ::= CONST precision? type variable_declarator_list SEMICOLON

varying_variable_declaration ::= VARYING (INTERPOLATION_FLAT | INTERPOLATION_SMOOTH)? precision? type variable_name array_size? (COLON hints)? SEMICOLON

local_variable_declaration ::= precision? type variable_declarator_list SEMICOLON

variable_declarator_list ::= variable_declarator (COMMA variable_declarator)*
variable_declarator ::= variable_name array_size? (OP_ASSIGN initializer)?

variable_name ::= IDENTIFIER

initializer ::= expression | initializer_list
initializer_list ::= CURLY_BRACKET_OPEN expression (COMMA expression)* CURLY_BRACKET_CLOSE

array_size ::= BRACKET_OPEN expression BRACKET_CLOSE
       
// Function Declarations
function_declaration ::= type function_name PARENTHESIS_OPEN parameter_list? PARENTHESIS_CLOSE block

function_name ::= IDENTIFIER

parameter_list ::= parameter (COMMA parameter)*
parameter ::= (ARG_IN | ARG_OUT | ARG_INOUT)? type parameter_name
parameter_name ::= IDENTIFIER

block ::= CURLY_BRACKET_OPEN statement_body* CURLY_BRACKET_CLOSE

// Struct Declarations
struct_declaration ::= STRUCT struct_name CURLY_BRACKET_OPEN struct_member* CURLY_BRACKET_CLOSE SEMICOLON
struct_name ::= IDENTIFIER
struct_member ::= type struct_member_name (array_size)? SEMICOLON
struct_member_name ::= IDENTIFIER

// Control Statements
control_statement ::= if_statement
					| for_statement
					| while_statement
					| do_while_statement
					| switch_statement
					
if_statement ::= CF_IF PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement_body (CF_ELSE (if_statement | block))?
for_statement ::= CF_FOR PARENTHESIS_OPEN (expression | for_variable_declaration) SEMICOLON expression SEMICOLON expression PARENTHESIS_CLOSE statement_body
for_variable_declaration ::= precision? type variable_declarator_list
do_while_statement ::= CF_DO statement_body CF_WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE SEMICOLON
while_statement ::= CF_WHILE PARENTHESIS_OPEN expression PARENTHESIS_CLOSE statement_body
switch_statement ::= CF_SWITCH PARENTHESIS_OPEN expression PARENTHESIS_CLOSE CURLY_BRACKET_OPEN case_clause* CURLY_BRACKET_CLOSE
case_clause ::= CF_CASE expression COLON statement* | CF_DEFAULT COLON statement_body*
return_statement ::= CF_RETURN expression? SEMICOLON
simple_statement ::= CF_BREAK SEMICOLON
					| CF_CONTINUE SEMICOLON
					| CF_DISCARD SEMICOLON
					
statement_body ::= block
				 | control_statement
				 | return_statement
				 | simple_statement
				 | expression_statement
				 | const_variable_declaration
				 | local_variable_declaration
				 | SEMICOLON
				 | LINE_COMMENT
				 | BLOCK_COMMENT
				 | preprocessor_directive

// Expressions
expression_statement ::= expression SEMICOLON
expression ::= conditional_expr

conditional_expr ::= assign_expr (QUESTION expression COLON expression)?
assign_expr ::= logic_or_expr (assignment_operator assign_expr)?
logic_or_expr ::= logic_and_expr (OP_OR logic_and_expr)*
logic_and_expr ::= bitwise_or_expr (OP_AND bitwise_or_expr)*
bitwise_or_expr ::= bitwise_xor_expr (OP_BIT_OR bitwise_xor_expr)*
bitwise_xor_expr ::= bitwise_and_expr (OP_BIT_XOR bitwise_and_expr)*
bitwise_and_expr ::= equality_expr (OP_BIT_AND equality_expr)*
equality_expr ::= relational_expr ((OP_EQUAL | OP_NOT_EQUAL) relational_expr)*
relational_expr ::= shift_expr ((OP_LESS | OP_LESS_EQUAL | OP_GREATER | OP_GREATER_EQUAL) shift_expr)*
shift_expr ::= additive_expr ((OP_SHIFT_LEFT | OP_SHIFT_RIGHT) additive_expr)*
additive_expr ::= multiplicative_expr ((OP_ADD | OP_SUB) multiplicative_expr)*
multiplicative_expr ::= unary_expr ((OP_MUL | OP_DIV | OP_MOD) unary_expr)*
unary_expr ::= (OP_NOT | OP_BIT_INVERT | OP_INCREMENT | OP_DECREMENT | OP_SUB)? postfix_expr
postfix_expr ::= primary (PERIOD struct_member_name | BRACKET_OPEN expression BRACKET_CLOSE)* (OP_INCREMENT | OP_DECREMENT)?
primary ::= literal
		  | function_call
		  | PARENTHESIS_OPEN expression PARENTHESIS_CLOSE
		  | variable_name
		  
function_call ::= (primitive_type | function_name) PARENTHESIS_OPEN argument_list? PARENTHESIS_CLOSE
argument_list ::= expression (COMMA expression)*

// Preprocessor Directives
preprocessor_directive ::= PP_DEFINE_LINE
                         | PP_UNDEF_LINE
                         | PP_IF_LINE
                         | PP_ELSE_LINE
                         | PP_ELIF_LINE
                         | PP_ENDIF_LINE
                         | PP_IFDEF_LINE
                         | PP_IFNDEF_LINE
                         | PP_ERROR_LINE
                         | PP_INCLUDE_LINE
                         | PP_PRAGMA_LINE

// Keywords
precision ::= PRECISION_LOW | PRECISION_MEDIUM | PRECISION_HIGH

assignment_operator ::= OP_ASSIGN | OP_ASSIGN_ADD | OP_ASSIGN_SUB | OP_ASSIGN_MUL | OP_ASSIGN_DIV 
                        | OP_ASSIGN_MOD | OP_ASSIGN_SHIFT_LEFT | OP_ASSIGN_SHIFT_RIGHT

type ::= primitive_type
       | TYPE_SAMPLER2D
       | TYPE_ISAMPLER2D
       | TYPE_USAMPLER2D
       | TYPE_SAMPLER3D
       | TYPE_ISAMPLER3D
       | TYPE_USAMPLER3D
       | TYPE_SAMPLERCUBE
       | TYPE_SAMPLERCUBEARRAY
       | TYPE_SAMPLEREXT
       | struct_name
       
primitive_type ::= TYPE_VOID
			   | TYPE_BOOL
			   | TYPE_BVEC2
			   | TYPE_BVEC3
			   | TYPE_BVEC4
			   | TYPE_INT
			   | TYPE_IVEC2
			   | TYPE_IVEC3
			   | TYPE_IVEC4
			   | TYPE_UINT
			   | TYPE_UVEC2
			   | TYPE_UVEC3
			   | TYPE_UVEC4
			   | TYPE_FLOAT
			   | TYPE_VEC2
			   | TYPE_VEC3
			   | TYPE_VEC4
			   | TYPE_MAT2
			   | TYPE_MAT3
			   | TYPE_MAT4

literal ::= TRUE
		  | FALSE
		  | FLOAT_CONSTANT
		  | INT_CONSTANT
		  | UINT_CONSTANT
		  | STRING_CONSTANT
		  
// Hints
hints ::= hint (COMMA hint)*
hint ::= simple_hint
	   | range_hint
	   | enum_hint
	   | instance_index_hint
simple_hint ::= hint_identifier (COMMA hint_identifier)*
range_hint ::= HINT_RANGE PARENTHESIS_OPEN number COMMA number (COMMA number)? PARENTHESIS_CLOSE
enum_hint ::= HINT_ENUM PARENTHESIS_OPEN STRING_CONSTANT (COMMA STRING_CONSTANT)* PARENTHESIS_CLOSE
instance_index_hint ::= HINT_INSTANCE_INDEX PARENTHESIS_OPEN INT_CONSTANT PARENTHESIS_CLOSE

number ::= (OP_SUB)? FLOAT_CONSTANT
		 | (OP_SUB)? INT_CONSTANT
		 | UINT_CONSTANT
		  
hint_identifier ::= HINT_DEFAULT_WHITE_TEXTURE
			      | HINT_DEFAULT_BLACK_TEXTURE
			      | HINT_DEFAULT_TRANSPARENT_TEXTURE
			      | HINT_NORMAL_TEXTURE
			      | HINT_ROUGHNESS_NORMAL_TEXTURE
			      | HINT_ROUGHNESS_R
			      | HINT_ROUGHNESS_G
			      | HINT_ROUGHNESS_B
			      | HINT_ROUGHNESS_A
			      | HINT_ROUGHNESS_GRAY
			      | HINT_ANISOTROPY_TEXTURE
			      | HINT_SOURCE_COLOR
			      | HINT_COLOR_CONVERSION_DISABLED	
			      | HINT_SCREEN_TEXTURE
			      | HINT_NORMAL_ROUGHNESS_TEXTURE
			      | HINT_DEPTH_TEXTURE
			      | FILTER_NEAREST
			      | FILTER_LINEAR
			      | FILTER_NEAREST_MIPMAP
			      | FILTER_LINEAR_MIPMAP
			      | FILTER_NEAREST_MIPMAP_ANISOTROPIC
			      | FILTER_LINEAR_MIPMAP_ANISOTROPIC
			      | REPEAT_ENABLE
			      | REPEAT_DISABLE
